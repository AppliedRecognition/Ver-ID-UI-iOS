#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef VERIDCORE_SWIFT_H
#define VERIDCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreGraphics;
@import CoreMedia;
@import Foundation;
@import ImageIO;
@import ObjectiveC;
#endif

#import <VerIDCore/VerIDCore.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VerIDCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class VerIDEulerAngle;
enum VerIDBearing : NSInteger;

SWIFT_CLASS("_TtC9VerIDCore22AngleBearingEvaluation")
@interface AngleBearingEvaluation : NSObject
/// Whether the angle can be considered to be matching the given bearing
/// \param angle Angle to evaluate against the bearing
///
/// \param matchesBearing Bearing the angle should match
///
///
/// returns:
/// <code>true</code> if the angle can be considered to be matching the bearing
- (BOOL)angle:(VerIDEulerAngle * _Nonnull)angle matchesBearing:(enum VerIDBearing)bearing SWIFT_WARN_UNUSED_RESULT;
/// Offset from the an angle to the given bearing.
/// Used, for example, to calculate the arrow showing the user where to move
/// \param from Angle from which to calculate the offset to the bearing
///
/// \param bearing Bearing to which the offset should be calculated
///
///
/// returns:
/// Angle that represents the difference (offset) between the given angle to the bearing angle
- (VerIDEulerAngle * _Nonnull)offsetFromAngle:(VerIDEulerAngle * _Nonnull)from toBearing:(enum VerIDBearing)bearing SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;

/// Settings common to registration, authentication and liveness detection sessions
SWIFT_CLASS_NAMED("VerIDSessionSettings")
@interface VerIDSessionSettings : NSObject
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// True to show the result of the session to the user
@property (nonatomic) BOOL showResult;
/// Number of successful results the session must collect before it finishes
@property (nonatomic) NSInteger numberOfResultsToCollect;
/// Time the user has to complete the session
@property (nonatomic) NSTimeInterval expiryTime;
/// Set this to record a video of the session
@property (nonatomic, copy) NSURL * _Nullable videoURL;
/// How many times can the user retry before the session returns a failure
@property (nonatomic) NSInteger maxRetryCount;
/// Include face templates in the returned result.
/// If you are going to use the collected faces for face recognition set this to <code>true</code>. Otherwise setting it to <code>false</code> will speed up the processing in the session. This may be useful if all you need to do is to detect liveness.
/// note:
/// Calling this method on registration and authentication sessions will have no effect. Both have this parameter always set to <code>true</code>.
@property (nonatomic) BOOL includeFaceTemplatesInResult;
/// Set to <code>true</code> to enable spoken prompts
@property (nonatomic) BOOL speakPrompts;
/// Horizontal (yaw) threshold where face is considered to be at an angle.
/// For example, a value of 15 indicates that a face with yaw -15 and below is oriented left and a face with yaw 15 or above is oriented right.
@property (nonatomic) CGFloat yawThreshold;
/// Vertical (pitch) threshold where face is considered to be at an angle.
/// For example, a value of 15 indicates that a face with pitch -15 and below is oriented up and a face with pitch 15 or above is oriented down.
@property (nonatomic) CGFloat pitchThreshold;
/// Fraction of the view width and height that represents the size of the face oval in the view.
@property (nonatomic) CGSize faceBoundsFraction;
/// Use the camera located on the front of the device when collecting images for face detection
@property (nonatomic) BOOL useFrontCamera;
@property (nonatomic) NSInteger faceBufferSize;
@property (nonatomic) double pauseDuration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Constructor
/// \param expiryTime Time the user has to complete the session
///
/// \param numberOfResultsToCollect Number of successful results the session must collect before it finishes
///
- (nonnull instancetype)initWithExpiryTime:(NSTimeInterval)expiryTime numberOfResultsToCollect:(NSInteger)numberOfResultsToCollect OBJC_DESIGNATED_INITIALIZER;
@end


/// Liveness detection session settings
SWIFT_CLASS_NAMED("LivenessDetectionSessionSettings")
@interface VerIDLivenessDetectionSessionSettings : VerIDSessionSettings
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithExpiryTime:(NSTimeInterval)expiryTime numberOfResultsToCollect:(NSInteger)numberOfResultsToCollect SWIFT_UNAVAILABLE;
@end

@class NSString;

/// Settings for authentication sessions
SWIFT_CLASS_NAMED("AuthenticationSessionSettings")
@interface VerIDAuthenticationSessionSettings : VerIDLivenessDetectionSessionSettings
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// ID of the user to authenticate
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// Constructor
/// \param userId ID of the user to authenticate
///
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, Axis, open) {
  AxisPitch = 0,
  AxisYaw = 1,
};

/// Bearing of the user’s head as she/he looks at the camera
typedef SWIFT_ENUM_NAMED(NSInteger, VerIDBearing, "Bearing", open) {
/// The user’s head is level with the camera
  VerIDBearingStraight = 0,
/// The user’s head is turned up
  VerIDBearingUp = 1,
/// The user’s head is turned right and up
  VerIDBearingRightUp = 2,
/// The user’s head is turned right
  VerIDBearingRight = 3,
/// The user’s head is turned right and down
  VerIDBearingRightDown = 4,
/// The user’s head is turned down
  VerIDBearingDown = 5,
/// The user’s head is turned left and down
  VerIDBearingLeftDown = 6,
/// The user’s head is turned left
  VerIDBearingLeft = 7,
/// The user’s head is turned left and up
  VerIDBearingLeftUp = 8,
};

typedef SWIFT_ENUM(NSInteger, DatabaseError, open) {
  DatabaseErrorFailedToOpenDatabase = 0,
  DatabaseErrorFailedToPrepareStatement = 1,
  DatabaseErrorFailedToBindText = 2,
};
static NSString * _Nonnull const DatabaseErrorDomain = @"VerIDCore.DatabaseError";

@class VerIDFace;

/// Represents a face detected in a Ver-ID session
SWIFT_CLASS_NAMED("DetectedFace")
@interface VerIDDetectedFace : NSObject
/// Face
@property (nonatomic, strong) VerIDFace * _Nonnull face;
/// Bearing of the face
@property (nonatomic) enum VerIDBearing bearing;
/// URL of the image in which the face was detected
@property (nonatomic, copy) NSURL * _Nullable imageURL;
/// Constructor
/// \param face Face
///
/// \param bearing Bearing
///
/// \param imageURL URL of the image in which the face was detected
///
- (nonnull instancetype)initWithFace:(VerIDFace * _Nonnull)face bearing:(enum VerIDBearing)bearing imageURL:(NSURL * _Nullable)imageURL OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("EulerAngle")
@interface VerIDEulerAngle : NSObject
@property (nonatomic) CGFloat yaw;
@property (nonatomic) CGFloat pitch;
@property (nonatomic) CGFloat roll;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC9VerIDCore22FaceAlignmentDetection")
@interface FaceAlignmentDetection : NSObject
/// Whether a face with the given bounds detected in an image of the given size can be considered “fixed”
/// Override this method to set your own requirements for considering the face fixed. Once the face is fixed the user is asked to hold the pose and the app starts collecting faces for face recognition.
/// \param bounds Smoothed bounds of the detected face
///
/// \param imageSize Size of the image in which the face was detected
///
///
/// returns:
/// <code>true</code> if the face can be considered “fixed”
- (BOOL)isFaceWithBounds:(CGRect)bounds fixedInImageSize:(CGSize)imageSize SWIFT_WARN_UNUSED_RESULT;
/// Portion of the image that represents the size of the face oval in the image
/// \param imageSize Image size
///
///
/// returns:
/// Rectangle that represents the size of the face oval in the image
- (CGRect)defaultFaceBoundsIn:(CGSize)imageSize SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol VerIDFaceTracking;
@class VerIDImage;

/// Face detection protocol
SWIFT_PROTOCOL_NAMED("FaceDetection")
@protocol VerIDFaceDetection
/// Start a face tracking session
///
/// returns:
/// Face tracking session
- (id <VerIDFaceTracking> _Nonnull)startFaceTracking SWIFT_WARN_UNUSED_RESULT;
/// Detect faces in image
/// You will have to call <code>createRecognizableFacesFromFaces(_:inImage:)</code> to use the faces for face recognition
/// \param image Image in which to detect faces
///
/// \param limit Maximum number of faces to detect
///
///
/// returns:
/// Array of faces
- (NSArray<VerIDFace *> * _Nullable)detectFacesInImage:(VerIDImage * _Nonnull)image limit:(int32_t)limit options:(NSUInteger)options error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, FaceDetectionError, open) {
  FaceDetectionErrorFaceNotFound = 0,
  FaceDetectionErrorFaceLost = 1,
  FaceDetectionErrorInternalError = 2,
  FaceDetectionErrorFaceTurnedOpposite = 3,
  FaceDetectionErrorFaceTurnedTooFast = 4,
};
static NSString * _Nonnull const FaceDetectionErrorDomain = @"VerIDCore.FaceDetectionError";


/// Face detection factory protocol
SWIFT_PROTOCOL_NAMED("FaceDetectionFactory")
@protocol VerIDFaceDetectionFactory
/// Create a face detection instance
///
/// throws:
/// Error if the creation fails
///
/// returns:
/// Instance of a class that implements the <code>FaceDetection</code> protocol
- (id <VerIDFaceDetection> _Nullable)createFaceDetectionAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC9VerIDCore18FaceDetectionImage")
@interface FaceDetectionImage : NSObject
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull data;
@property (nonatomic, readonly) VerIDImageFormat format;
@property (nonatomic, readonly) CGImagePropertyOrientation orientation;
@property (nonatomic, readonly) CGSize size;
@property (nonatomic, readonly) NSUInteger bytesPerRow;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class FaceDetectionResult;
@class FacePresenceDetection;
@class SpoofingDetection;
@protocol ImageProcessorService;

/// Face detection service protocol
SWIFT_PROTOCOL("_TtP9VerIDCore20FaceDetectionService_")
@protocol FaceDetectionService
/// Detect a face in image
/// \param image Image in which to detect a face
///
///
/// returns:
/// Face detection result
- (FaceDetectionResult * _Nonnull)detectFaceInImage:(VerIDImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// Requested bearing
@property (nonatomic) enum VerIDBearing requestedBearing;
@property (nonatomic, readonly, strong) AngleBearingEvaluation * _Nonnull angleBearingEvaluation;
@property (nonatomic, readonly, strong) FacePresenceDetection * _Nonnull facePresenceDetection;
@property (nonatomic, readonly, strong) FaceAlignmentDetection * _Nonnull faceAlignmentDetection;
@property (nonatomic, readonly, strong) SpoofingDetection * _Nullable spoofingDetection;
/// Image processors to use when preparing images for face detection
/// since:
/// 1.5.0
@property (nonatomic, copy) NSArray<id <ImageProcessorService>> * _Nonnull imageProcessors;
@end

@class VerID;

/// Ver-ID SDK’s implementation of the face detection service protocol
SWIFT_CLASS("_TtC9VerIDCore25VerIDFaceDetectionService")
@interface VerIDFaceDetectionService : NSObject <FaceDetectionService>
@property (nonatomic, strong) AngleBearingEvaluation * _Nonnull angleBearingEvaluation;
@property (nonatomic, strong) FacePresenceDetection * _Nonnull facePresenceDetection;
@property (nonatomic, strong) FaceAlignmentDetection * _Nonnull faceAlignmentDetection;
@property (nonatomic, strong) SpoofingDetection * _Nullable spoofingDetection;
/// Image processors to use when preparing images for face detection
/// since:
/// 1.5.0
@property (nonatomic, copy) NSArray<id <ImageProcessorService>> * _Nonnull imageProcessors SWIFT_DEPRECATED_MSG("Set on VerIDFaceDetectionRecognitionFactory instead");
@property (nonatomic, readonly, strong) VerIDSessionSettings * _Nonnull settings;
@property (nonatomic, readonly, strong) VerID * _Nonnull environment;
- (nonnull instancetype)initWithSettings:(VerIDSessionSettings * _Nonnull)settings environment:(VerID * _Nonnull)environment OBJC_DESIGNATED_INITIALIZER;
/// Detect face in image
/// \param image Image in which to detect the face
///
///
/// returns:
/// Face detection result
- (FaceDetectionResult * _Nonnull)detectFaceInImage:(VerIDImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// Requested bearing
@property (nonatomic) enum VerIDBearing requestedBearing;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9VerIDCore32FaceDetectionRegistrationService")
@interface FaceDetectionRegistrationService : VerIDFaceDetectionService
- (nonnull instancetype)initWithSettings:(VerIDSessionSettings * _Nonnull)settings environment:(VerID * _Nonnull)environment OBJC_DESIGNATED_INITIALIZER;
@end

enum FaceDetectionStatus : NSInteger;

/// Result of face detection ran in a Ver-ID session
SWIFT_CLASS("_TtC9VerIDCore19FaceDetectionResult")
@interface FaceDetectionResult : NSObject
/// Size of the image used for face detection (orientation corrected)
@property (nonatomic, readonly) CGSize imageSize;
/// Face detected in the image
@property (nonatomic, readonly, strong) VerIDFace * _Nullable face;
/// Smoothed bounds of the detected face
@property (nonatomic, readonly) CGRect faceBounds;
/// Smoothed angle of the detected face
@property (nonatomic, readonly, strong) VerIDEulerAngle * _Nullable faceAngle;
/// Face detection status within the session
@property (nonatomic, readonly) enum FaceDetectionStatus status;
/// Requested bearing
@property (nonatomic, readonly) enum VerIDBearing requestedBearing;
/// Optional name of the image processor used to prepare the image for face detection
@property (nonatomic, readonly, copy) NSString * _Nullable imageProcessorName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Face detection service factory protocol
SWIFT_PROTOCOL("_TtP9VerIDCore27FaceDetectionServiceFactory_")
@protocol FaceDetectionServiceFactory
/// Create a face detection service
/// \param settings Session settings to be used when detecting faces
///
///
/// returns:
/// Instance of a class that conforms to the <code>FaceDetectionService</code> protocol
- (id <FaceDetectionService> _Nullable)makeFaceDetectionServiceWithSettings:(VerIDSessionSettings * _Nonnull)settings error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

/// Face detection status after detecting a face
typedef SWIFT_ENUM(NSInteger, FaceDetectionStatus, open) {
  FaceDetectionStatusStarted = 0,
  FaceDetectionStatusFailed = 1,
  FaceDetectionStatusFaceFound = 2,
  FaceDetectionStatusFaceFixed = 3,
  FaceDetectionStatusFaceMisaligned = 4,
  FaceDetectionStatusFaceAligned = 5,
  FaceDetectionStatusFaceLost = 6,
  FaceDetectionStatusFaceTurnedTooFar = 7,
  FaceDetectionStatusFaceTurnedOpposite = 8,
  FaceDetectionStatusMovedTooFast = 9,
};


SWIFT_CLASS("_TtC9VerIDCore21FacePresenceDetection")
@interface FacePresenceDetection : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;
@protocol VerIDRecognizable;

/// Face recognition protocol
SWIFT_PROTOCOL_NAMED("FaceRecognition")
@protocol VerIDFaceRecognition
/// Threshold for authentication
/// When comparing faces, comparisons with score above the threshold will be considered authenticated.
@property (nonatomic, strong) NSNumber * _Nonnull authenticationScoreThreshold;
/// Maximum score that may be achieved by comparing two faces
@property (nonatomic, readonly, strong) NSNumber * _Nonnull maxAuthenticationScore;
/// Compare recognizable face or multiface subject to faces
/// \param subjectFaces Subject faces to compare to other faces
///
/// \param faces Other faces to compare to subject faces
///
///
/// returns:
/// Score indicating the similarity between the faces
- (NSNumber * _Nullable)compareSubjectFaces:(NSArray<id <VerIDRecognizable>> * _Nonnull)subjectFaces toFaces:(NSArray<id <VerIDRecognizable>> * _Nonnull)faces error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Extract face recognition template from a face to make it available for recognition
/// \param faces Faces to convert
///
/// \param image Sample buffer in which the faces were detected
///
///
/// returns:
/// Array of recognizable faces
- (NSArray<id <VerIDRecognizable>> * _Nullable)createRecognizableFacesFromFaces:(NSArray<VerIDFace *> * _Nonnull)faces inImage:(VerIDImage * _Nonnull)image error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, FaceRecognitionError, open) {
  FaceRecognitionErrorTemplateExtractionFailed = 0,
};
static NSString * _Nonnull const FaceRecognitionErrorDomain = @"VerIDCore.FaceRecognitionError";


/// Face recognition factory protocol
SWIFT_PROTOCOL_NAMED("FaceRecognitionFactory")
@protocol VerIDFaceRecognitionFactory
/// Create a face recognition instance
///
/// throws:
/// Error if the creation fails
///
/// returns:
/// Instance of a class that implements the <code>FaceRecognition</code> protocol
- (id <VerIDFaceRecognition> _Nullable)createFaceRecognitionAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// Face tracking protocol
SWIFT_PROTOCOL_NAMED("FaceTracking")
@protocol VerIDFaceTracking
/// Track face in a sample buffer
/// \param image Image in which to detect faces
///
///
/// returns:
/// Face without a face recognition template
- (VerIDFace * _Nullable)trackFaceInImage:(VerIDImage * _Nonnull)image error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// Provides an adjustment of grayscale image used for face detection
/// since:
/// 1.5.0
SWIFT_CLASS("_TtC9VerIDCore23ImageAdjustmentProvider")
@interface ImageAdjustmentProvider : NSObject
/// Name of the adjustment
/// since:
/// 1.5.0
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Adjust grayscale buffer with the given size
/// since:
/// 1.5.0
/// \param buffer Grayscale buffer to adjust
///
/// \param size Size of the image in the buffer
///
///
/// throws:
/// Error if the adjustment fails
///
/// returns:
/// Adjusted buffer
- (NSArray<NSNumber *> * _Nullable)adjustImageBuffer:(NSArray<NSNumber *> * _Nonnull)buffer size:(CGSize)size error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Adjust grayscale by applying a histogram
/// Extend this class to supply your histogram
/// since:
/// 1.5.0
SWIFT_CLASS("_TtC9VerIDCore28ImageAdjustmentHistogramSpec")
@interface ImageAdjustmentHistogramSpec : ImageAdjustmentProvider
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (NSArray<NSNumber *> * _Nullable)adjustImageBuffer:(NSArray<NSNumber *> * _Nonnull)buffer size:(CGSize)size error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Adjust grayscale by brightening its dark tones
/// since:
/// 1.5.0
SWIFT_CLASS("_TtC9VerIDCore23ImageAdjustmentBrighten")
@interface ImageAdjustmentBrighten : ImageAdjustmentHistogramSpec
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Adjust grayscale using image equalization
/// since:
/// 1.5.0
SWIFT_CLASS("_TtC9VerIDCore23ImageAdjustmentEqualize")
@interface ImageAdjustmentEqualize : ImageAdjustmentProvider
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (NSArray<NSNumber *> * _Nullable)adjustImageBuffer:(NSArray<NSNumber *> * _Nonnull)buffer size:(CGSize)size error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



typedef SWIFT_ENUM(NSInteger, ImageProcessingError, open) {
  ImageProcessingErrorGrayscaleConversionError = 0,
  ImageProcessingErrorImageProcessorTaskError = 1,
};
static NSString * _Nonnull const ImageProcessingErrorDomain = @"VerIDCore.ImageProcessingError";


/// Protocol for a service that processes images for face detection
/// since:
/// 1.5.0
SWIFT_PROTOCOL("_TtP9VerIDCore21ImageProcessorService_")
@protocol ImageProcessorService
/// Prepare image for face detection
/// since:
/// 1.5.0
/// \param image The image to prepare
///
/// \param recalculate <code>true</code> if the image buffer should be recalculated if it exists
///
///
/// throws:
/// Error if the image preparation fails
- (BOOL)prepareImageForFaceDetection:(VerIDImage * _Nonnull)image recalculate:(BOOL)recalculate error:(NSError * _Nullable * _Nullable)error;
/// Create upright <code>CGImage</code> from <code>VerIDImage</code>
/// since:
/// 1.5.0
/// \param image The image to convert
///
///
/// throws:
/// Error if the conversion fails
///
/// returns:
/// <code>VerIDImage</code> converted to <code>CGImage</code>
- (CGImageRef _Nullable)cgImageFromVerIDImage:(VerIDImage * _Nonnull)image error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Optional name of the image processor (useful for logging to see which processor was used in different circumstances)
/// since:
/// 1.5.0
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@end


/// Protocol for a factory that creates an instance of <code>ImageProcessorService</code>
/// since:
/// 1.5.0
SWIFT_PROTOCOL("_TtP9VerIDCore28ImageProcessorServiceFactory_")
@protocol ImageProcessorServiceFactory
/// Create an instance of <code>ImageProcessorService</code>
/// since:
/// 1.5.0
///
/// throws:
/// Error if the service creation fails
///
/// returns:
/// Instance of <code>ImageProcessorService</code>
- (id <ImageProcessorService> _Nullable)makeImageProcessorServiceAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// Image provider service protocol
SWIFT_PROTOCOL("_TtP9VerIDCore20ImageProviderService_")
@protocol ImageProviderService
/// Dequeue image
///
/// throws:
/// Error if the image cannot be provided
///
/// returns:
/// Ver-ID image for face detection
- (VerIDImage * _Nullable)dequeueImageAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// Image provider service factory protocol
SWIFT_PROTOCOL("_TtP9VerIDCore27ImageProviderServiceFactory_")
@protocol ImageProviderServiceFactory
/// Make image provider service
///
/// returns:
/// Instance of a class that implements the <code>ImageProviderService</code> procotol
- (id <ImageProviderService> _Nonnull)makeImageProviderService SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImage;
@class ImageQualityParams;

SWIFT_CLASS_NAMED("ImageUtil")
@interface VerIDImageUtil : NSObject
+ (UIImage * _Nullable)grayscaleImageFrom:(UIImage * _Nonnull)image error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (double)sharpnessOfImage:(CGImageRef _Nonnull)image orientation:(CGImagePropertyOrientation)orientation SWIFT_WARN_UNUSED_RESULT;
+ (ImageQualityParams * _Nonnull)brightnessContrastAndSharpnessOfImage:(CGImageRef _Nonnull)image orientation:(CGImagePropertyOrientation)orientation SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image writer service protocol
SWIFT_PROTOCOL("_TtP9VerIDCore18ImageWriterService_")
@protocol ImageWriterService
/// Write image to URL
/// \param image Image to write to the URL
///
/// \param completion Callback invoked on completion of the write operation
///
///
/// returns:
/// URL if the image was written or nil if the writing failed
- (NSURL * _Nullable)writeImage:(VerIDImage * _Nonnull)image completion:(void (^ _Nullable)(NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
@end


/// Image writer service factory protocol
SWIFT_PROTOCOL("_TtP9VerIDCore25ImageWriterServiceFactory_")
@protocol ImageWriterServiceFactory
/// Create an instance of image writer service
///
/// throws:
/// Error if the service creation fails
///
/// returns:
/// Instance of a class that conforms to the <code>ImageWriterService</code> protocol
- (id <ImageWriterService> _Nullable)makeImageWriterServiceAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

/// Liveness detection constants
typedef SWIFT_ENUM_NAMED(NSInteger, VerIDLivenessDetection, "LivenessDetection", open) {
/// No liveness detection
  VerIDLivenessDetectionNone = 0,
/// Regular liveness detection (suitable in most cases)
  VerIDLivenessDetectionRegular = 1,
/// Strict liveness detection (the user must register faces with different poses)
  VerIDLivenessDetectionStrict = 2,
};



/// Ver-ID’s default implementation of the <code>ImageProcessorService</code> protocol
/// since:
/// 1.5.0
SWIFT_CLASS("_TtC9VerIDCore26VerIDImageProcessorService")
@interface VerIDImageProcessorService : NSObject <ImageProcessorService>
/// Adjustment provider to use when converting the image to grayscale
/// since:
/// 1.5.0
@property (nonatomic, readonly, strong) ImageAdjustmentProvider * _Nonnull imageAdjustmentProvider;
/// Name of the provider for logging purposes. Inherited from the adjustment provider.
/// since:
/// 1.5.0
@property (nonatomic, readonly, copy) NSString * _Nullable name;
- (nonnull instancetype)init;
/// Constructor
/// since:
/// 1.5.0
/// \param imageAdjustmentProvider Image adjustment provider to use when converting the image to grayscale
///
- (nonnull instancetype)initWithImageAdjustmentProvider:(ImageAdjustmentProvider * _Nonnull)imageAdjustmentProvider OBJC_DESIGNATED_INITIALIZER;
/// Prepare image for face detection
/// since:
/// 1.5.0
/// \param image The image to prepare
///
/// \param recalculate <code>true</code> if the image buffer should be recalculated if it exists
///
///
/// throws:
/// Error if the image preparation fails
- (BOOL)prepareImageForFaceDetection:(VerIDImage * _Nonnull)image recalculate:(BOOL)recalculate error:(NSError * _Nullable * _Nullable)error;
/// Create upright <code>CGImage</code> from <code>VerIDImage</code>
/// since:
/// 1.5.0
/// \param image The image to convert
///
///
/// throws:
/// Error if the conversion fails
///
/// returns:
/// <code>VerIDImage</code> converted to <code>CGImage</code>
- (CGImageRef _Nullable)cgImageFromVerIDImage:(VerIDImage * _Nonnull)image error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC9VerIDCore32PassThroughImageProcessorService")
@interface PassThroughImageProcessorService : VerIDImageProcessorService
- (BOOL)prepareImageForFaceDetection:(VerIDImage * _Nonnull)image recalculate:(BOOL)recalculate error:(NSError * _Nullable * _Nullable)error;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
- (nonnull instancetype)initWithImageAdjustmentProvider:(ImageAdjustmentProvider * _Nonnull)imageAdjustmentProvider OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;

SWIFT_CLASS_NAMED("RecognitionFace")
@interface VerIDRecognitionFace : NSObject <VerIDRecognizable>
@property (nonatomic, copy) NSData * _Nonnull recognitionData;
@property (nonatomic) int32_t version;
- (nonnull instancetype)initWithRecognitionData:(NSData * _Nonnull)recognitionData OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9VerIDCore9VerIDFace")
@interface VerIDFace : NSObject
@property (nonatomic) CGRect bounds;
@property (nonatomic, strong) VerIDEulerAngle * _Nonnull angle;
@property (nonatomic) CGFloat quality;
@property (nonatomic) CGPoint leftEye;
@property (nonatomic) CGPoint rightEye;
@property (nonatomic, copy) NSData * _Nonnull data;
@property (nonatomic, copy) NSArray<NSValue *> * _Nonnull landmarks;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("RecognizableFace")
@interface VerIDRecognizableFace : VerIDFace <VerIDRecognizable>
@property (nonatomic, copy) NSData * _Nonnull recognitionData;
@property (nonatomic) int32_t version;
- (nonnull instancetype)initWithFace:(VerIDFace * _Nonnull)face recognitionData:(NSData * _Nonnull)recognitionData version:(int32_t)version OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Settings for registration sessions
SWIFT_CLASS_NAMED("RegistrationSessionSettings")
@interface VerIDRegistrationSessionSettings : VerIDSessionSettings
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (void)setRawBearingsToRegister:(NSArray<NSNumber *> * _Nonnull)bearings;
/// ID of the user to register
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// Constructor
/// \param userId ID of the user to register, UUID will be generated if nil
///
/// \param showResult True to show the result of the session to the user
///
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId showResult:(BOOL)showResult OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithExpiryTime:(NSTimeInterval)expiryTime numberOfResultsToCollect:(NSInteger)numberOfResultsToCollect SWIFT_UNAVAILABLE;
@end

@class VerIDSessionResult;
enum ResultEvaluationStatus : NSInteger;

/// Result evaluation service protocol
SWIFT_PROTOCOL("_TtP9VerIDCore23ResultEvaluationService_")
@protocol ResultEvaluationService
@property (nonatomic, readonly, strong) VerIDSessionResult * _Nonnull sessionResult;
/// Add face detection result to be evaluated and receive a session result
/// \param result Face detection result to be evaluated
///
/// \param image Image from which the face detection result was produced
///
/// \param imageURL Optional image URL writer used to persist the image
///
///
/// returns:
/// Session result based on the evaluation of the face detection results added to the service
- (enum ResultEvaluationStatus)addResult:(FaceDetectionResult * _Nonnull)result image:(VerIDImage * _Nonnull)image imageURL:(NSURL * _Nullable)imageURL SWIFT_WARN_UNUSED_RESULT;
@end


/// Result evaluation service factory protocol
SWIFT_PROTOCOL("_TtP9VerIDCore30ResultEvaluationServiceFactory_")
@protocol ResultEvaluationServiceFactory
/// Create a result evaluation service
/// \param settings Session settings to use when evaluating the face detection results
///
///
/// returns:
/// Instance of a class that conforms to the <code>ResultEvaluationService</code> protocol
- (id <ResultEvaluationService> _Nonnull)makeResultEvaluationServiceWithSettings:(VerIDSessionSettings * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
@end

/// Status of result evaluation
typedef SWIFT_ENUM(NSInteger, ResultEvaluationStatus, open) {
/// The service is waiting for more face detection results
  ResultEvaluationStatusWaiting = 0,
/// The service is processing the detected faces
  ResultEvaluationStatusProcessing = 1,
/// Result evaluation is finished
  ResultEvaluationStatusFinished = 2,
};

@protocol SessionOperationDelegate;

/// Operation that periodically evaluates images until it produces a session result
SWIFT_CLASS("_TtC9VerIDCore16SessionOperation")
@interface SessionOperation : NSOperation
/// Service that detects faces in the images supplied by <code>imageProvider</code>
@property (nonatomic, readonly, strong) id <FaceDetectionService> _Nonnull faceDetection;
/// Service that evaluates face detection results received from <code>faceDetection</code>
@property (nonatomic, readonly, strong) id <ResultEvaluationService> _Nonnull resultEvaluation;
/// Service that provides images for face detection
@property (nonatomic, readonly, strong) id <ImageProviderService> _Nonnull imageProvider;
/// Service that writes images to URLs
@property (nonatomic, readonly, strong) id <ImageWriterService> _Nullable imageWriter;
/// Session delegate
@property (nonatomic, weak) id <SessionOperationDelegate> _Nullable delegate;
/// Operation constructor
/// \param imageProvider Service that provides images for face detection
///
/// \param faceDetection Service that detects faces in the images supplied by <code>imageProvider</code>
///
/// \param resultEvaluation Service that evaluates face detection results received from <code>faceDetection</code>
///
/// \param imageWriter Service that writes images to URLs
///
- (nonnull instancetype)initWithEnvironment:(VerID * _Nonnull)environment imageProvider:(id <ImageProviderService> _Nonnull)imageProvider faceDetection:(id <FaceDetectionService> _Nonnull)faceDetection resultEvaluation:(id <ResultEvaluationService> _Nonnull)resultEvaluation imageWriter:(id <ImageWriterService> _Nullable)imageWriter OBJC_DESIGNATED_INITIALIZER;
- (void)main;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, SessionOperationError, open) {
  SessionOperationErrorImageUnavailable = 0,
};
static NSString * _Nonnull const SessionOperationErrorDomain = @"VerIDCore.SessionOperation.SessionOperationError";


/// Session operation delegate protocol
SWIFT_PROTOCOL("_TtP9VerIDCore24SessionOperationDelegate_")
@protocol SessionOperationDelegate
/// Called periodically when the session operation outputs a session result after evaluating face detection result
/// note:
/// This method is called periodically after each face detection completes. You can use the results to update the GUI but wait for the session operation to finish to present the final session result to the user.
/// \param result Session result after evaluating face detection result
///
/// \param faceDetectionResult Face detection result that was used to generate the session result
///
- (void)operationDidOutputSessionResult:(VerIDSessionResult * _Nonnull)result fromFaceDetectionResult:(FaceDetectionResult * _Nonnull)faceDetectionResult;
- (void)operationDidFinishWritingImage:(NSURL * _Nonnull)url forFace:(VerIDFace * _Nonnull)face;
@end


SWIFT_CLASS("_TtC9VerIDCore17SpoofingDetection")
@interface SpoofingDetection : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Identify users in an image
/// since:
/// 1.9.0
SWIFT_CLASS_NAMED("UserIdentification")
@interface VerIDUserIdentification : NSObject
/// Ver-ID environment
/// since:
/// 1.9.0
@property (nonatomic, readonly, strong) VerID * _Nonnull verid;
/// Constructor
/// since:
/// 1.9.0
/// \param verid Ver-ID environment
///
- (nonnull instancetype)initWithVerid:(VerID * _Nonnull)verid OBJC_DESIGNATED_INITIALIZER;
/// Identify users in a face
/// since:
/// 1.9.0
/// \param face Face in which to identify users
///
///
/// returns:
/// Dictionary with IDs of identified users and the score of the match
- (NSDictionary<NSString *, NSNumber *> * _Nullable)identifyUsersInFace:(id <VerIDRecognizable> _Nonnull)face error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// User management protocol
SWIFT_PROTOCOL_NAMED("UserManagement")
@protocol VerIDUserManagement
/// note:
/// If faces were previously assigned to another user they should be reassigned to the given user.
/// \param faces Faces or recognizable multiface structures to assign to the user
///
/// \param userId User to whom the faces will be assigned
///
/// \param completion Callback on completion
///
- (void)assignFaces:(NSArray<id <VerIDRecognizable>> * _Nonnull)faces toUser:(NSString * _Nonnull)userId completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Delete faces or multiface structures
/// \param faces Faces to delete
///
/// \param completion Callback on completion
///
- (void)deleteFaces:(NSArray<id <VerIDRecognizable>> * _Nonnull)faces completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Get all managed users
///
/// returns:
/// Array of user IDs
- (NSArray<NSString *> * _Nullable)usersAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Get faces of user
/// \param userId ID of the user whose faces to return
///
///
/// returns:
/// Array of recognizable faces
- (NSArray<id <VerIDRecognizable>> * _Nullable)facesOfUser:(NSString * _Nonnull)userId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Get all managed faces
///
/// returns:
/// Array of recognizable faces
- (NSArray<id <VerIDRecognizable>> * _Nullable)facesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Delete users
/// \param userIds IDs of the users to delete
///
/// \param completion Callback on completion
///
- (void)deleteUsers:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


/// User management protocol factory
SWIFT_PROTOCOL_NAMED("UserManagementFactory")
@protocol VerIDUserManagementFactory
/// Create a user management instance
///
/// throws:
/// Error if the creation fails
///
/// returns:
/// Instance of a class that implements the <code>UserManagement</code> protocol
- (id <VerIDUserManagement> _Nullable)createUserManagementAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// Environment for face detection, recognition and for user management
SWIFT_CLASS("_TtC9VerIDCore5VerID")
@interface VerID : NSObject
/// Face detection
@property (nonatomic, readonly, strong) id <VerIDFaceDetection> _Nonnull faceDetection;
/// Face recognition
@property (nonatomic, readonly, strong) id <VerIDFaceRecognition> _Nonnull faceRecognition;
/// User management
@property (nonatomic, readonly, strong) id <VerIDUserManagement> _Nonnull userManagement;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull releaseVersion;)
+ (NSString * _Nonnull)releaseVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, VerIDError, open) {
  VerIDErrorInvalidAPISecret = 0,
  VerIDErrorInvalidAPIKey = 1,
  VerIDErrorSdkAuthorizationTimeout = 2,
  VerIDErrorSdkAuthorizationRequestError = 3,
  VerIDErrorSdkAuthorizationResponseParseError = 4,
  VerIDErrorSdkAuthenticationRequestEncodingError = 5,
  VerIDErrorSdkAuthenticationRequestError = 6,
  VerIDErrorSdkAuthenticationResponseParseError = 7,
  VerIDErrorSdkAuthenticationTimeout = 8,
  VerIDErrorSessionTimeout = 9,
  VerIDErrorInvalidAuthUrl = 10,
  VerIDErrorUnknownError = 11,
};
static NSString * _Nonnull const VerIDErrorDomain = @"VerIDCore.VerIDError";


@class DetRecLib;

/// Ver-ID SDK’s default implementation of the <code>FaceDetection</code> protocol
SWIFT_CLASS("_TtC9VerIDCore18VerIDFaceDetection")
@interface VerIDFaceDetection : NSObject <VerIDFaceDetection>
/// Face template extraction (for face recognition) will only be run if the detected face’s quality meets this threshold
@property (nonatomic) float faceExtractQualityThreshold;
/// Full face detection (slower) will be run if the detected face quality falls below this threshold when tracking a face in a sequence of images
@property (nonatomic) float landmarkTrackingQualityThreshold;
/// Core C++ library wrapper
@property (nonatomic, readonly, strong) DetRecLib * _Nonnull detRecLib;
/// Image processors used to prepare images for face detection
/// since:
/// 1.6.0
@property (nonatomic, copy) NSArray<id <ImageProcessorService>> * _Nonnull imageProcessors;
/// Detect faces in image
/// note:
/// Use <code>FaceRecognition.createRecognizableFacesFromFaces(_:inImage:)</code> to use the faces for face recognition
/// \param image Image in which to detect faces
///
/// \param limit Maximum number of faces to detect
///
/// \param options Option flags (unused in this version)
///
///
/// throws:
/// Error if the detection fails
///
/// returns:
/// Array of detected faces
- (NSArray<VerIDFace *> * _Nullable)detectFacesInImage:(VerIDImage * _Nonnull)image limit:(int32_t)limit options:(NSUInteger)options error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Start face tracking
///
/// returns:
/// Face tracking session
- (id <VerIDFaceTracking> _Nonnull)startFaceTracking SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DetRecLibSettings;

/// Ver-ID SDK’s default implementation of the <code>FaceDetectionFactory</code> and <code>FaceRecognitionFactory</code> protocols
SWIFT_CLASS("_TtC9VerIDCore36VerIDFaceDetectionRecognitionFactory")
@interface VerIDFaceDetectionRecognitionFactory : NSObject <VerIDFaceDetectionFactory, VerIDFaceRecognitionFactory>
/// Image processing services used to prepare images for face detection and recognition
/// since:
/// 1.6.0
@property (nonatomic, copy) NSArray<id <ImageProcessorService>> * _Nonnull imageProcessors SWIFT_DEPRECATED_MSG("The method will be removed in version 2.0.0. Please use `faceDetectionImageProcessors` and `faceRecognitionImageProcessors` instead.");
/// Image processing services used to prepare images for face detection
/// since:
/// 1.10.0
@property (nonatomic, copy) NSArray<id <ImageProcessorService>> * _Nonnull faceDetectionImageProcessors;
/// Image processing services used to prepare images for face recognition
/// since:
/// 1.10.0
@property (nonatomic, copy) NSArray<id <ImageProcessorService>> * _Nonnull faceRecognitionImageProcessors;
/// Constructor
/// \param apiSecret Ver-ID API secret or <code>nil</code> to use secret specified in the app’s Info.plist
///
/// \param settings Detection/recognition library settings or <code>nil</code> to use default
///
- (nonnull instancetype)initWithApiSecret:(NSString * _Nullable)apiSecret settings:(DetRecLibSettings * _Nullable)settings OBJC_DESIGNATED_INITIALIZER;
/// Create an instance of <code>VerIDFaceDetection</code>
///
/// throws:
/// Error if the face detection instance creation fails
///
/// returns:
/// Face detection instance
- (id <VerIDFaceDetection> _Nullable)createFaceDetectionAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Create an instance of <code>VerIDFaceRecognition</code>
///
/// throws:
/// Error if the face recognition instance creation fails
///
/// returns:
/// Face recognition instance
- (id <VerIDFaceRecognition> _Nullable)createFaceRecognitionAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Face detection and recognition factory errors
typedef SWIFT_ENUM(NSInteger, VerIDFaceDetectionRecognitionFactoryError, open) {
/// The URL for resources (model files) specified in the settings is invalid
  VerIDFaceDetectionRecognitionFactoryErrorInvalidModelsURL = 0,
/// Failed to initialize resource loader class
  VerIDFaceDetectionRecognitionFactoryErrorFailedToInitializeResourceLoader = 1,
/// Failed to initialize face detection or recognition
  VerIDFaceDetectionRecognitionFactoryErrorFailedToInitializeFaceDetectionRecognition = 2,
/// Image processors array must not be empty
  VerIDFaceDetectionRecognitionFactoryErrorMissingImageProcessors = 3,
};
static NSString * _Nonnull const VerIDFaceDetectionRecognitionFactoryErrorDomain = @"VerIDCore.VerIDFaceDetectionRecognitionFactoryError";


typedef SWIFT_ENUM(NSInteger, VerIDFaceDetectionServiceError, open) {
  VerIDFaceDetectionServiceErrorFaceNotFound = 0,
};
static NSString * _Nonnull const VerIDFaceDetectionServiceErrorDomain = @"VerIDCore.VerIDFaceDetectionServiceError";


/// Ver-ID SDK’s implementation of the <code>FaceDetectionServiceFactory</code> protocol
SWIFT_CLASS("_TtC9VerIDCore32VerIDFaceDetectionServiceFactory")
@interface VerIDFaceDetectionServiceFactory : NSObject <FaceDetectionServiceFactory>
/// Constructor
/// \param environment Ver-ID environment to use for face detection
///
- (nonnull instancetype)initWithEnvironment:(VerID * _Nonnull)environment OBJC_DESIGNATED_INITIALIZER;
/// Constructor
/// since:
/// 1.5.0
/// \param environment Ver-ID environment to use for face detection
///
/// \param imageProcessors Image processors to use when preparing images for face detection. Array must not be empty
///
///
/// throws:
/// Error if the image processors array is empty
- (nullable instancetype)initWithEnvironment:(VerID * _Nonnull)environment imageProcessors:(NSArray<id <ImageProcessorService>> * _Nonnull)imageProcessors error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Create an instance of face detection service
/// \param settings Session settings
///
///
/// returns:
/// Instance of <code>VerIDFaceDetectionService</code>
- (id <FaceDetectionService> _Nullable)makeFaceDetectionServiceWithSettings:(VerIDSessionSettings * _Nonnull)settings error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, VerIDFaceDetectionServiceFactoryError, open) {
  VerIDFaceDetectionServiceFactoryErrorImageProcessorsEmpty = 0,
};
static NSString * _Nonnull const VerIDFaceDetectionServiceFactoryErrorDomain = @"VerIDCore.VerIDFaceDetectionServiceFactoryError";


/// Ver-ID SDK’s default implementation of the <code>FaceRecognition</code> protocol
SWIFT_CLASS("_TtC9VerIDCore20VerIDFaceRecognition")
@interface VerIDFaceRecognition : NSObject <VerIDFaceRecognition>
/// Core C++ library wrapper
@property (nonatomic, readonly, strong) DetRecLib * _Nonnull detRecLib;
/// Face comparisons that result in score that equals or exceeds the threshold will consider the subject authenticated
@property (nonatomic, strong) NSNumber * _Nonnull authenticationScoreThreshold;
/// Maximum score that may be achieved by comparing two faces
@property (nonatomic, readonly, strong) NSNumber * _Nonnull maxAuthenticationScore;
/// Image processors used to prepare images for face recognition
/// since:
/// 1.6.0
@property (nonatomic, copy) NSArray<id <ImageProcessorService>> * _Nonnull imageProcessors;
/// Create a face that can be used for face recognition
/// \param faces Faces to convert to be usable for recognition
///
/// \param image Image in which the faces were detected
///
///
/// throws:
/// Error if the operation fails
///
/// returns:
/// Array of faces suitable for face recognition
- (NSArray<id <VerIDRecognizable>> * _Nullable)createRecognizableFacesFromFaces:(NSArray<VerIDFace *> * _Nonnull)faces inImage:(VerIDImage * _Nonnull)image error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Compare faces of a subject to other faces
/// \param subjectFaces Subject faces to compare to other faces
///
/// \param faces Other faces to compare to subject faces
///
///
/// throws:
/// Error if the comparison fails
///
/// returns:
/// Comparison score – if the score equals or exceeds the <code>authenticationScoreThreshold</code> the subject may be considered authenticated in the faces
- (NSNumber * _Nullable)compareSubjectFaces:(NSArray<id <VerIDRecognizable>> * _Nonnull)subjectFaces toFaces:(NSArray<id <VerIDRecognizable>> * _Nonnull)faces error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSNumber *> * _Nullable)rawFaceTemplateFromFace:(id <VerIDRecognizable> _Nonnull)face error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Ver-ID SDK’s default implementation of the <code>FaceTracking</code> protocol
SWIFT_CLASS("_TtC9VerIDCore17VerIDFaceTracking")
@interface VerIDFaceTracking : NSObject <VerIDFaceTracking>
/// Track face in an image
/// note:
/// The session keeps track of previously detected faces. Inexpensive landmark detection is used to detect the face until its quality deteriorates. After that full face detection is used.
/// \param image Image in which to track the face
///
///
/// throws:
/// Error if the tracking fails
///
/// returns:
/// Tracked face
- (VerIDFace * _Nullable)trackFaceInImage:(VerIDImage * _Nonnull)image error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol VerIDFactoryDelegate;

/// Ver-ID environment factory
SWIFT_CLASS("_TtC9VerIDCore12VerIDFactory")
@interface VerIDFactory : NSObject
/// Delegate that will be called when the environment is created
@property (nonatomic, weak) id <VerIDFactoryDelegate> _Nullable delegate;
/// Face detection factory
@property (nonatomic, strong) id <VerIDFaceDetectionFactory> _Nonnull faceDetectionFactory;
/// Face recognition factory
@property (nonatomic, strong) id <VerIDFaceRecognitionFactory> _Nonnull faceRecognitionFactory;
/// User management factory
@property (nonatomic, strong) id <VerIDUserManagementFactory> _Nonnull userManagementFactory;
/// Constructor
/// \param userManagementFactory User management factory instance
///
- (nonnull instancetype)initWithUserManagementFactory:(id <VerIDUserManagementFactory> _Nonnull)userManagementFactory OBJC_DESIGNATED_INITIALIZER;
/// Constructor
- (nonnull instancetype)init;
/// Start creating Ver-ID instance
/// The creation completion will be reported to the factory delegate.
- (void)createVerID;
/// Create Ver-ID instance synchronously
/// note:
/// This may take up to a few seconds. Never call this method on the main thread.
/// since:
/// 1.9.0
///
/// returns:
/// Instance of VerID
- (VerID * _Nullable)createVerIDSyncAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

@class VerIDIdentity;

@interface VerIDFactory (SWIFT_EXTENSION(VerIDCore))
/// Constructor
/// since:
/// 1.10.0
/// \param veridPassword Password to unlock Ver-ID identity p12 file
///
- (nonnull instancetype)initWithVeridPassword:(NSString * _Nonnull)veridPassword SWIFT_AVAILABILITY(ios,introduced=10.3);
/// Constructor
/// since:
/// 1.11.0
/// \param identity Your app’s Ver-ID SDK identity <a href="https://github.com/AppliedRecognition/Ver-ID-SDK-Identity-Apple#creating-a-ver-id-sdk-identity">created</a> from credentials received after <a href="https://dev.ver-id.com/licensing/">registering your app</a> with Ver-ID
///
- (nonnull instancetype)initWithIdentity:(VerIDIdentity * _Nonnull)identity SWIFT_AVAILABILITY(ios,introduced=10.3);
@end


/// Ver-ID factory delegate protocol
SWIFT_PROTOCOL("_TtP9VerIDCore20VerIDFactoryDelegate_")
@protocol VerIDFactoryDelegate
@optional
/// Called when a Ver-ID instance is created
/// \param factory Factory that created the Ver-ID instance
///
/// \param instance Ver-ID environment instance
///
- (void)veridFactory:(VerIDFactory * _Nonnull)factory didCreateVerID:(VerID * _Nonnull)instance;
@required
/// Called when a Ver-ID instance creation fails
/// \param factory Factory that attempted to create the Ver-ID instance
///
/// \param error Error that describes the failure
///
- (void)veridFactory:(VerIDFactory * _Nonnull)factory didFailWithError:(NSError * _Nonnull)error;
@end


///
SWIFT_CLASS("_TtC9VerIDCore10VerIDImage")
@interface VerIDImage : NSObject
/// Sample buffer
@property (nonatomic, readonly) CMSampleBufferRef _Nullable sampleBuffer;
/// CGImage representation
@property (nonatomic, readonly) CGImageRef _Nullable cgImage;
/// Original image orientation
@property (nonatomic, readonly) CGImagePropertyOrientation orientation;
/// Image processed for face detection
/// since:
/// 1.9.0
@property (nonatomic, readonly, strong) FaceDetectionImage * _Nullable faceDetectionImage;
/// Name of the image processor used to prepare the image for face detection
/// since:
/// 1.9.0
@property (nonatomic, readonly, copy) NSString * _Nullable imageProcessorName;
/// Create image from a sample buffer
/// \param sampleBuffer Sample buffer, e.g., from a camera
///
/// \param orientation Sample buffer image orientation
///
- (nonnull instancetype)initWithSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer orientation:(CGImagePropertyOrientation)orientation OBJC_DESIGNATED_INITIALIZER;
/// Create image from <code>CGImage</code>
/// \param cgImage Source image
///
/// \param orientation Source image orientation
///
- (nonnull instancetype)initWithCgImage:(CGImageRef _Nonnull)cgImage orientation:(CGImagePropertyOrientation)orientation OBJC_DESIGNATED_INITIALIZER;
/// Create image from URL
/// \param url URL of the image file
///
- (nullable instancetype)initWithUrl:(NSURL * _Nonnull)url;
- (nullable instancetype)initWithUiImage:(UIImage * _Nonnull)uiImage OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSString * _Nullable grayscaleImageProcessorName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Ver-ID’s default implementation of the <code>ImageProcessorServiceFactory</code> protocol
/// since:
/// 1.5.0
SWIFT_CLASS("_TtC9VerIDCore33VerIDImageProcessorServiceFactory")
@interface VerIDImageProcessorServiceFactory : NSObject <ImageProcessorServiceFactory>
/// Constructor
/// since:
/// 1.5.0
/// \param adjustmentProvider Image adjustment provider used to adjust the grayscale image
///
- (nonnull instancetype)initWithAdjustmentProvider:(ImageAdjustmentProvider * _Nonnull)adjustmentProvider OBJC_DESIGNATED_INITIALIZER;
/// Create an instance of <code>VerIDImageProcessorService</code>
/// since:
/// 1.5.0
///
/// throws:
/// Error if the service creation fails
///
/// returns:
/// Instance of <code>VerIDImageProcessorService</code>
- (id <ImageProcessorService> _Nullable)makeImageProcessorServiceAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Ver-ID SDK’s default implementation of the <code>ImageWriterService</code> protocol
SWIFT_CLASS("_TtC9VerIDCore23VerIDImageWriterService")
@interface VerIDImageWriterService : NSObject <ImageWriterService>
/// Write image to a temp file and return the file URL
/// \param image Image to write
///
///
/// returns:
/// File URL of the image temp file
- (NSURL * _Nullable)writeImage:(VerIDImage * _Nonnull)image completion:(void (^ _Nullable)(NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Ver-ID SDK’s default implementation of the <code>ImageWriterServiceFactory</code> protocol
SWIFT_CLASS("_TtC9VerIDCore30VerIDImageWriterServiceFactory")
@interface VerIDImageWriterServiceFactory : NSObject <ImageWriterServiceFactory>
@property (nonatomic, readonly, strong) id <ImageProcessorServiceFactory> _Nonnull imageProcessorFactory;
/// Factory constructor
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImageProcessorFactory:(id <ImageProcessorServiceFactory> _Nonnull)imageProcessorFactory OBJC_DESIGNATED_INITIALIZER;
/// Create an instance of image writer service
///
/// throws:
/// Error if the instance creation fails
///
/// returns:
/// Instance of <code>VerIDImageWriterService</code>
- (id <ImageWriterService> _Nullable)makeImageWriterServiceAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// Ver-ID SDK’s implementation of the <code>ResultEvaluationServiceFactory</code> protocol
SWIFT_CLASS("_TtC9VerIDCore35VerIDResultEvaluationServiceFactory")
@interface VerIDResultEvaluationServiceFactory : NSObject <ResultEvaluationServiceFactory>
/// Ver-ID environment to use when evaluating the face detection results
@property (nonatomic, readonly, strong) VerID * _Nonnull environment;
/// Constructor
/// \param environment Ver-ID environment to use when evaluating the face detection results
///
- (nonnull instancetype)initWithEnvironment:(VerID * _Nonnull)environment OBJC_DESIGNATED_INITIALIZER;
/// Creates result evaluation service based on the session settings
/// \param settings Session settings
///
///
/// returns:
/// Result evaluation service. The type of service will depend on the type of session settings, e.g., <code>RegistrationSessionSettings</code> will create <code>VerIDRegistrationEvaluationService</code>.
- (id <ResultEvaluationService> _Nonnull)makeResultEvaluationServiceWithSettings:(VerIDSessionSettings * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a result of face detection and authentication
SWIFT_CLASS_NAMED("VerIDSessionResult")
@interface VerIDSessionResult : NSObject
/// Error produced by the session or <code>nil</code> if the session is successful
@property (nonatomic, readonly) NSError * _Nullable error;
/// Faces and URLs of images collected in the session
@property (nonatomic, readonly, copy) NSArray<VerIDDetectedFace *> * _Nonnull attachments;
/// URL of a video of the session. Only collected if the corresponding session settings had <code>videoURL</code> set.
@property (nonatomic, copy) NSURL * _Nullable videoURL;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Constructs a result with error
/// \param error Error
///
- (nonnull instancetype)initWithError:(NSError * _Nonnull)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAttachments:(NSArray<VerIDDetectedFace *> * _Nonnull)attachments OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Detected faces
@property (nonatomic, readonly, copy) NSArray<VerIDFace *> * _Nonnull faces;
/// Detected faces that are suitable for face recognition
@property (nonatomic, readonly, copy) NSArray<VerIDRecognizableFace *> * _Nonnull facesSuitableForRecognition;
/// URLs of images collected in the session
@property (nonatomic, readonly, copy) NSArray<NSURL *> * _Nonnull imageURLs;
/// Faces with given bearing
/// \param bearing Requested face bearing
///
///
/// returns:
/// Array of faces
- (NSArray<VerIDFace *> * _Nonnull)facesWithBearing:(enum VerIDBearing)bearing SWIFT_WARN_UNUSED_RESULT;
/// Faces with given bearing that are suitable for face recognition
/// \param bearing Requested face bearings
///
///
/// returns:
/// Array of faces suitable for face recognition
- (NSArray<VerIDRecognizableFace *> * _Nonnull)facesSuitableForRecognitionWithBearing:(enum VerIDBearing)bearing SWIFT_WARN_UNUSED_RESULT;
/// URLs of images with the given face bearing
/// \param bearing Requested face bearing
///
///
/// returns:
/// Array of image URLs
- (NSArray<NSURL *> * _Nonnull)imageURLsWithBearing:(enum VerIDBearing)bearing SWIFT_WARN_UNUSED_RESULT;
@end



/// Ver-ID SDK’s default implementation of the <code>UserManagement</code> protocol. Uses Core Data to store the user face records.
SWIFT_CLASS("_TtC9VerIDCore19VerIDUserManagement") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface VerIDUserManagement : NSObject <VerIDUserManagement>
/// Use <code>VerIDUserManagementFactory</code> to create an instance
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Assign faces to a user
/// \param faces Faces to assign to the user
///
/// \param userId ID of the user to assign the faces to
///
/// \param completion Callback to invoke on completion
///
- (void)assignFaces:(NSArray<id <VerIDRecognizable>> * _Nonnull)faces toUser:(NSString * _Nonnull)userId completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Delete faces
/// \param faces Faces to delete
///
/// \param completion Completion callback
///
- (void)deleteFaces:(NSArray<id <VerIDRecognizable>> * _Nonnull)faces completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Get all registered users
///
/// throws:
/// Error if the operation fails
///
/// returns:
/// Array of registered user IDs
- (NSArray<NSString *> * _Nullable)usersAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Get faces of a user
/// \param userId ID of the user whose faces to get
///
///
/// throws:
/// Error if the operation fails
///
/// returns:
/// Array of user’s recognizable faces
- (NSArray<id <VerIDRecognizable>> * _Nullable)facesOfUser:(NSString * _Nonnull)userId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Get all registered faces
///
/// throws:
/// Error if the operation fails
///
/// returns:
/// Array of recognizable faces
- (NSArray<id <VerIDRecognizable>> * _Nullable)facesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Delete users
/// \param userIds IDs of the users to delete
///
/// \param completion Callback on completion
///
- (void)deleteUsers:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


/// Ver-ID SDK’s default implementation of the user management protocol
SWIFT_CLASS("_TtC9VerIDCore26VerIDUserManagementFactory")
@interface VerIDUserManagementFactory : NSObject <VerIDUserManagementFactory>
/// If <code>true</code> face template encryption will be disabled
@property (nonatomic, readonly) BOOL disableEncryption;
/// Constructor
/// Face template encryption is enabled by default
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Constructor
/// \param disableEncryption <code>true</code> to disable face template encryption
///
- (nonnull instancetype)initWithDisableEncryption:(BOOL)disableEncryption OBJC_DESIGNATED_INITIALIZER;
/// Create an instance of <code>VerIDUserManagement</code>
///
/// throws:
/// Error if the creation fails
///
/// returns:
/// Instance of <code>VerIDUserManagement</code>
- (id <VerIDUserManagement> _Nullable)createUserManagementAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// Ver-ID SDK’s default implementation of the <code>UserManagement</code> protocol. Uses Core Data to store the user face records.
SWIFT_CLASS("_TtC9VerIDCore23VerIDUserManagementiOS9")
@interface VerIDUserManagementiOS9 : NSObject <VerIDUserManagement>
/// Use <code>VerIDUserManagementFactory</code> to create an instance
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Assign faces to a user
/// \param faces Faces to assign to the user
///
/// \param userId ID of the user to assign the faces to
///
/// \param completion Callback to invoke on completion
///
- (void)assignFaces:(NSArray<id <VerIDRecognizable>> * _Nonnull)faces toUser:(NSString * _Nonnull)userId completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Delete faces
/// \param faces Faces to delete
///
/// \param completion Completion callback
///
- (void)deleteFaces:(NSArray<id <VerIDRecognizable>> * _Nonnull)faces completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Get all registered users
///
/// throws:
/// Error if the operation fails
///
/// returns:
/// Array of registered user IDs
- (NSArray<NSString *> * _Nullable)usersAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Get faces of a user
/// \param userId ID of the user whose faces to get
///
///
/// throws:
/// Error if the operation fails
///
/// returns:
/// Array of user’s recognizable faces
- (NSArray<id <VerIDRecognizable>> * _Nullable)facesOfUser:(NSString * _Nonnull)userId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Get all registered faces
///
/// throws:
/// Error if the operation fails
///
/// returns:
/// Array of recognizable faces
- (NSArray<id <VerIDRecognizable>> * _Nullable)facesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Delete users
/// \param userIds IDs of the users to delete
///
/// \param completion Callback on completion
///
- (void)deleteUsers:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


/// Video writer service protocol
SWIFT_PROTOCOL("_TtP9VerIDCore18VideoWriterService_")
@protocol VideoWriterService
/// Write a sample buffer as a frame of a video
/// \param sampleBuffer Sample buffer to write
///
/// \param rotation Rotation of the video frame in degrees
///
- (void)writeSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer rotation:(CGFloat)rotation;
/// Finish writing the video
/// \param completionBlock Callback when the video is written to a URL
///
- (void)finishWithCompletionBlock:(void (^ _Nonnull)(NSURL * _Nullable))completionBlock;
@end


/// Ver-ID SDK’s implementation of the <code>VideoWriterService</code> protocol
SWIFT_CLASS("_TtC9VerIDCore23VerIDVideoWriterService")
@interface VerIDVideoWriterService : NSObject <VideoWriterService>
/// Write a sample buffer as a video frame
/// \param sampleBuffer Sample buffer to write
///
/// \param rotation Rotation of the frame in degrees
///
- (void)writeSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer rotation:(CGFloat)rotation;
/// Finish writing the video file
/// \param completionBlock Callback that will be invoked when the file is written or if the writing fails
///
- (void)finishWithCompletionBlock:(void (^ _Nonnull)(NSURL * _Nullable))completionBlock;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Video writer service factory protocol
SWIFT_PROTOCOL("_TtP9VerIDCore25VideoWriterServiceFactory_")
@protocol VideoWriterServiceFactory
/// Create an instance of video writer service
/// \param url URL to which the video will be written to
///
///
/// throws:
/// Error if the instance creation fails
///
/// returns:
/// Instance of a class that conforms to the <code>VideoWriterService</code> protocol
- (id <VideoWriterService> _Nullable)makeVideoWriterServiceWithUrl:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// Ver-ID SDK’s implementation of the <code>VideoWriterServiceFactory</code> protocol
SWIFT_CLASS("_TtC9VerIDCore30VerIDVideoWriterServiceFactory")
@interface VerIDVideoWriterServiceFactory : NSObject <VideoWriterServiceFactory>
- (nonnull instancetype)init;
/// Create an instance of <code>VerIDVideoWriterService</code>
/// \param url URL to which the video will be writen to
///
///
/// throws:
/// Error if the creation fails
///
/// returns:
/// Instance of <code>VerIDVideoWriterService</code>
- (id <VideoWriterService> _Nullable)makeVideoWriterServiceWithUrl:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end



#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
