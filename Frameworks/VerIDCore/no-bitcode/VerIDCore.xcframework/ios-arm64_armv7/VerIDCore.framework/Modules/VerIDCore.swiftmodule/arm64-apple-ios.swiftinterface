// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VerIDCore
import AVFoundation
import Accelerate
import CommonCrypto
import CoreAudio
import CoreData
import CoreGraphics
import CoreMedia
import Foundation
import GLKit
import SQLite3
import Security
import Swift
import UIKit
@_exported import VerIDCore
import VerIDSDKIdentity
import ZIPFoundation
import _Concurrency
import os
import os.signpost
@_inheritsConvenienceInitializers @objc(VerIDSessionSettings) public class VerIDSessionSettings : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc public var showResult: Swift.Bool
  @objc public var numberOfResultsToCollect: Swift.Int
  @objc public var expiryTime: Swift.Double
  @objc public var videoURL: Foundation.URL?
  @objc public var maxRetryCount: Swift.Int
  @objc public var includeFaceTemplatesInResult: Swift.Bool
  @objc public var speakPrompts: Swift.Bool
  @objc public var yawThreshold: CoreGraphics.CGFloat
  @objc public var pitchThreshold: CoreGraphics.CGFloat
  @objc public var faceBoundsFraction: CoreGraphics.CGSize
  @objc public var useFrontCamera: Swift.Bool
  @objc public var faceBufferSize: Swift.Int
  @objc public var pauseDuration: Swift.Double
  @objc override dynamic public init()
  @objc public init(expiryTime: Foundation.TimeInterval = 30.0, numberOfResultsToCollect: Swift.Int = 1)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc(VerIDLivenessDetectionSessionSettings) public class LivenessDetectionSessionSettings : VerIDCore.VerIDSessionSettings {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public static let defaultBearings: Swift.Set<VerIDCore.Bearing>
  public var bearings: Swift.Set<VerIDCore.Bearing>
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc(VerIDAuthenticationSessionSettings) public class AuthenticationSessionSettings : VerIDCore.LivenessDetectionSessionSettings {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc final public let userId: Swift.String
  @objc public init(userId: Swift.String)
  required public init(from decoder: Swift.Decoder) throws
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc(VerIDRegistrationSessionSettings) public class RegistrationSessionSettings : VerIDCore.VerIDSessionSettings {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public var bearingsToRegister: [VerIDCore.Bearing]
  @objc public func setRawBearingsToRegister(_ bearings: Swift.Array<Swift.Int>)
  @objc final public let userId: Swift.String
  @objc public init(userId: Swift.String, showResult: Swift.Bool = false)
  required public init(from decoder: Swift.Decoder) throws
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@available(*, deprecated, renamed: "VerIDSessionSettings")
public typealias SessionSettings = VerIDCore.VerIDSessionSettings
@_hasMissingDesignatedInitializers @objc public class VerIDFaceRecognition : ObjectiveC.NSObject, VerIDCore.FaceRecognition {
  @objc final public let detRecLib: VerIDCore.DetRecLib
  @objc public var authenticationScoreThreshold: Foundation.NSNumber
  @objc final public let maxAuthenticationScore: Foundation.NSNumber
  @objc public var imageProcessors: [VerIDCore.ImageProcessorService]
  @objc public func createRecognizableFacesFromFaces(_ faces: [VerIDCore.Face], inImage image: VerIDCore.VerIDImage) throws -> [VerIDCore.Recognizable]
  @objc public func compareSubjectFaces(_ subjectFaces: [VerIDCore.Recognizable], toFaces faces: [VerIDCore.Recognizable]) throws -> Foundation.NSNumber
  @objc public func rawFaceTemplate(fromFace face: VerIDCore.Recognizable) throws -> [Foundation.NSNumber]
  @objc deinit
}
@objc public class FaceDetectionImage : ObjectiveC.NSObject {
  @objc final public let data: [Swift.UInt8]
  @objc final public let format: VerIDCore.VerIDImageFormat
  @objc final public let orientation: ImageIO.CGImagePropertyOrientation
  @objc final public let size: CoreGraphics.CGSize
  @objc final public let bytesPerRow: Swift.UInt
  public init(data: [Swift.UInt8], format: VerIDCore.VerIDImageFormat, orientation: ImageIO.CGImagePropertyOrientation, size: CoreGraphics.CGSize, bytesPerRow: Swift.UInt)
  @objc deinit
}
@objc(VerIDRecognizableFace) public class RecognizableFace : VerIDCore.Face, VerIDCore.Recognizable {
  @objc public var recognitionData: Foundation.Data
  @objc public var version: Swift.Int32
  @objc public init(face: VerIDCore.Face, recognitionData: Foundation.Data, version: Swift.Int32 = 1)
  required public init(from decoder: Swift.Decoder) throws
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class VerIDUserManagementFactory : ObjectiveC.NSObject, VerIDCore.UserManagementFactory {
  @objc final public let disableEncryption: Swift.Bool
  @objc override dynamic public init()
  @objc public init(disableEncryption: Swift.Bool)
  @objc public func createUserManagement() throws -> VerIDCore.UserManagement
  @objc deinit
}
@objc(VerIDUserManagement) public protocol UserManagement {
  typealias ErrorCallback = (Swift.Error?) -> Swift.Void
  @objc func assignFaces(_ faces: [VerIDCore.Recognizable], toUser userId: Swift.String, completion: Self.ErrorCallback?)
  @objc func deleteFaces(_ faces: [VerIDCore.Recognizable], completion: Self.ErrorCallback?)
  @objc func users() throws -> [Swift.String]
  @objc func facesOfUser(_ userId: Swift.String) throws -> [VerIDCore.Recognizable]
  @objc func faces() throws -> [VerIDCore.Recognizable]
  @objc func deleteUsers(_ userIds: [Swift.String], completion: Self.ErrorCallback?)
}
@objc(VerIDUserManagementFactory) public protocol UserManagementFactory {
  @objc func createUserManagement() throws -> VerIDCore.UserManagement
}
@objc @_inheritsConvenienceInitializers public class FaceDetectionRegistrationService : VerIDCore.VerIDFaceDetectionService {
  @objc override public init(settings: VerIDCore.VerIDSessionSettings, environment: VerIDCore.VerID)
  @objc deinit
}
@objc public enum FaceDetectionStatus : Swift.Int, Swift.Codable, Swift.CaseIterable {
  case started, failed, faceFound, faceFixed, faceMisaligned, faceAligned, faceLost, faceTurnedTooFar, faceTurnedOpposite, movedTooFast
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [VerIDCore.FaceDetectionStatus]
  public typealias RawValue = Swift.Int
  public static var allCases: [VerIDCore.FaceDetectionStatus] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol FaceDetectionService {
  @objc func detectFaceInImage(_ image: VerIDCore.VerIDImage) -> VerIDCore.FaceDetectionResult
  @objc var requestedBearing: VerIDCore.Bearing { get set }
  @objc var angleBearingEvaluation: VerIDCore.AngleBearingEvaluation { get }
  @objc var facePresenceDetection: VerIDCore.FacePresenceDetection { get }
  @objc var faceAlignmentDetection: VerIDCore.FaceAlignmentDetection { get }
  @objc var spoofingDetection: VerIDCore.SpoofingDetection? { get }
  @objc var imageProcessors: [VerIDCore.ImageProcessorService] { get set }
}
@objc public protocol FaceDetectionServiceFactory {
  @objc func makeFaceDetectionService(settings: VerIDCore.VerIDSessionSettings) throws -> VerIDCore.FaceDetectionService
}
@objc public enum VerIDFaceDetectionServiceError : Swift.Int, Swift.Error {
  case faceNotFound
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc open class VerIDFaceDetectionService : ObjectiveC.NSObject, VerIDCore.FaceDetectionService {
  @objc public var angleBearingEvaluation: VerIDCore.AngleBearingEvaluation
  @objc public var facePresenceDetection: VerIDCore.FacePresenceDetection
  @objc public var faceAlignmentDetection: VerIDCore.FaceAlignmentDetection
  @objc public var spoofingDetection: VerIDCore.SpoofingDetection?
  @available(*, deprecated, message: "Set on VerIDFaceDetectionRecognitionFactory instead")
  @objc public var imageProcessors: [VerIDCore.ImageProcessorService] {
    @objc get
    @objc set
  }
  @objc final public let settings: VerIDCore.VerIDSessionSettings
  @objc final public let environment: VerIDCore.VerID
  @objc public init(settings: VerIDCore.VerIDSessionSettings, environment: VerIDCore.VerID)
  @objc open func detectFaceInImage(_ image: VerIDCore.VerIDImage) -> VerIDCore.FaceDetectionResult
  @objc open var requestedBearing: VerIDCore.Bearing {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc public class VerIDFaceDetectionServiceFactory : ObjectiveC.NSObject, VerIDCore.FaceDetectionServiceFactory {
  @objc public init(environment: VerIDCore.VerID)
  @objc public init(environment: VerIDCore.VerID, imageProcessors: [VerIDCore.ImageProcessorService]) throws
  @objc public func makeFaceDetectionService(settings: VerIDCore.VerIDSessionSettings) throws -> VerIDCore.FaceDetectionService
  @objc deinit
}
@objc public enum Axis : Swift.Int {
  case pitch, yaw
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum VerIDFaceDetectionServiceFactoryError : Swift.Int, Swift.Error {
  case imageProcessorsEmpty
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(VerIDImageUtil) public class ImageUtil : ObjectiveC.NSObject {
  @objc public static func grayscaleImage(from image: UIKit.UIImage) throws -> UIKit.UIImage
  public static func grayscaleBufferFromVerIDImage(_ image: VerIDCore.VerIDImage) throws -> (buffer: [Swift.UInt8], size: CoreGraphics.CGSize)
  public static func argbBufferFromVerIDImage(_ image: VerIDCore.VerIDImage) throws -> (buffer: [Swift.UInt8], size: CoreGraphics.CGSize)
  public static func rgbBufferFromVerIDImage(_ image: VerIDCore.VerIDImage) throws -> (buffer: [Swift.UInt8], size: CoreGraphics.CGSize)
  public static func cgImageFromVerIDImage(_ image: VerIDCore.VerIDImage) -> CoreGraphics.CGImage?
  public static func cgImageFromSampleBuffer(_ sampleBuffer: CoreMedia.CMSampleBuffer, orientation: ImageIO.CGImagePropertyOrientation) -> CoreGraphics.CGImage?
  public static func sizeOfVerIDImage(_ image: VerIDCore.VerIDImage) throws -> CoreGraphics.CGSize
  public static func rgbFromSampleBuffer(_ sampleBuffer: CoreMedia.CMSampleBuffer, orientation: ImageIO.CGImagePropertyOrientation) throws -> (buffer: [Swift.UInt8], size: CoreGraphics.CGSize)
  public static func rgbFromCGImage(_ image: CoreGraphics.CGImage, orientation: ImageIO.CGImagePropertyOrientation) throws -> (buffer: [Swift.UInt8], size: CoreGraphics.CGSize)
  public static func argbFromSampleBuffer(_ sampleBuffer: CoreMedia.CMSampleBuffer, orientation: ImageIO.CGImagePropertyOrientation) throws -> (buffer: [Swift.UInt8], size: CoreGraphics.CGSize)
  public static func grayscaleBufferFromSampleBuffer(_ sampleBuffer: CoreMedia.CMSampleBuffer, orientation: ImageIO.CGImagePropertyOrientation) throws -> (buffer: [Swift.UInt8], size: CoreGraphics.CGSize)
  public static func grayscaleBufferFromCGImage(_ image: CoreGraphics.CGImage, orientation: ImageIO.CGImagePropertyOrientation) throws -> (buffer: [Swift.UInt8], size: CoreGraphics.CGSize)
  public static func argbBufferFromCGImage(_ image: CoreGraphics.CGImage, orientation: ImageIO.CGImagePropertyOrientation) throws -> (buffer: [Swift.UInt8], size: CoreGraphics.CGSize)
  @objc public static func sharpnessOfImage(_ image: CoreGraphics.CGImage, orientation: ImageIO.CGImagePropertyOrientation) -> Swift.Double
  @objc public static func brightnessContrastAndSharpnessOfImage(_ image: CoreGraphics.CGImage, orientation: ImageIO.CGImagePropertyOrientation) -> VerIDCore.ImageQualityParams
  @objc override dynamic public init()
  @objc deinit
}
public enum ImageUtilError : Swift.Error {
  case cgImageConversionError, vImageBufferInitializationError, grayscaleConversionError, cgImageFromBufferError, pixelBufferInitializationError, pixelBufferAddressError, imageMatrixMultiplyError, getAddressOfPlaneError, unsupportedPixelFormat, imageRotationError, invalidVerIDImage, channelPermutationError, yuvConversionError, rgbConversionError, imageAdjustmentError
  public static func == (a: VerIDCore.ImageUtilError, b: VerIDCore.ImageUtilError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class FaceAlignmentDetection : ObjectiveC.NSObject {
  public enum Status : Swift.Int {
    case found, fixed, aligned, misaligned
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var status: VerIDCore.FaceAlignmentDetection.Status {
    get
  }
  public init(angleBearingEvaluation: VerIDCore.AngleBearingEvaluation)
  public func addFace(_ face: VerIDCore.Face, imageSize: CoreGraphics.CGSize, requestedBearing: VerIDCore.Bearing)
  public func reset()
  @objc open func isFaceWithBounds(_ bounds: CoreGraphics.CGRect, fixedInImageSize imageSize: CoreGraphics.CGSize) -> Swift.Bool
  @objc open func defaultFaceBounds(in imageSize: CoreGraphics.CGSize) -> CoreGraphics.CGRect
  @objc deinit
}
public class Transaction : Swift.Codable {
  final public let time: Foundation.Date
  final public let error: Swift.String?
  public init(time: Foundation.Date, error: Swift.String? = nil)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc(VerIDFaceTracking) public protocol FaceTracking {
  @objc func trackFaceInImage(_ image: VerIDCore.VerIDImage) throws -> VerIDCore.Face
}
@objc public class FaceDetectionResult : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let imageSize: CoreGraphics.CGSize
  @objc final public let face: VerIDCore.Face?
  @objc final public let faceBounds: CoreGraphics.CGRect
  @objc final public let faceAngle: VerIDCore.EulerAngle?
  @objc final public let status: VerIDCore.FaceDetectionStatus
  @objc final public let requestedBearing: VerIDCore.Bearing
  @objc final public let imageProcessorName: Swift.String?
  convenience public init(status: VerIDCore.FaceDetectionStatus, requestedBearing: VerIDCore.Bearing, imageProcessorName: Swift.String?)
  public init(imageSize: CoreGraphics.CGSize, face: VerIDCore.Face?, faceBounds: CoreGraphics.CGRect?, faceAngle: VerIDCore.EulerAngle?, status: VerIDCore.FaceDetectionStatus, requestedBearing: VerIDCore.Bearing, imageProcessorName: Swift.String?)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public class Signposting {
  public init(category: Swift.String)
  public func createSignpost(name: Swift.StaticString) -> VerIDCore.Signpost
  public func logStart(signpost: VerIDCore.Signpost)
  public func logEnd(signpost: VerIDCore.Signpost)
  @objc deinit
}
public class Signpost {
  final public let name: Swift.StaticString
  final public let signpostId: Any?
  public var startTime: Swift.Double?
  public init(name: Swift.StaticString, signpostId: Any?)
  @objc deinit
}
public class FunctionCallReport : VerIDCore.Transaction {
  public enum Function : Swift.String, Swift.Codable {
    case detectFaces, compareFaces
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  final public let function: VerIDCore.FunctionCallReport.Function
  public init(function: VerIDCore.FunctionCallReport.Function, time: Foundation.Date = Date(), error: Swift.String? = nil)
  required public init(from decoder: Swift.Decoder) throws
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc public class SessionOperation : Foundation.Operation {
  @objc public enum SessionOperationError : Swift.Int, Swift.Error {
    case imageUnavailable
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public static var _nsErrorDomain: Swift.String {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public let faceDetection: VerIDCore.FaceDetectionService
  @objc final public let resultEvaluation: VerIDCore.ResultEvaluationService
  @objc final public let imageProvider: VerIDCore.ImageProviderService
  @objc final public let imageWriter: VerIDCore.ImageWriterService?
  @objc weak public var delegate: VerIDCore.SessionOperationDelegate?
  public var result: VerIDCore.VerIDSessionResult {
    get
  }
  @objc public init(environment: VerIDCore.VerID, imageProvider: VerIDCore.ImageProviderService, faceDetection: VerIDCore.FaceDetectionService, resultEvaluation: VerIDCore.ResultEvaluationService, imageWriter: VerIDCore.ImageWriterService?)
  @objc override dynamic public func main()
  @objc deinit
}
@objc(VerIDRecognitionFace) public class RecognitionFace : ObjectiveC.NSObject, VerIDCore.Recognizable, Swift.Codable {
  public enum Version : Swift.Int32 {
    case unencrypted, encrypted
    public init?(rawValue: Swift.Int32)
    public typealias RawValue = Swift.Int32
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @objc public var recognitionData: Foundation.Data
  @objc public var version: Swift.Int32
  @objc public init(recognitionData: Foundation.Data)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc(VerIDFaceRecognitionFactory) public protocol FaceRecognitionFactory {
  @objc func createFaceRecognition() throws -> VerIDCore.FaceRecognition
}
public class Smoothing<T> {
  public var smoothedValue: T? {
    get
  }
  public init(bufferSize: Swift.Int)
  public func addSample(_ sample: T)
  public func removeFirstSample()
  public func reset()
  @objc deinit
}
@_inheritsConvenienceInitializers public class CGFloatSmoothing : VerIDCore.Smoothing<CoreGraphics.CGFloat> {
  override public init(bufferSize: Swift.Int)
  @objc deinit
}
@_inheritsConvenienceInitializers public class CGRectSmoothing : VerIDCore.Smoothing<CoreGraphics.CGRect> {
  override public init(bufferSize: Swift.Int)
  @objc deinit
}
@objc(VerIDFaceDetectionFactory) public protocol FaceDetectionFactory {
  @objc func createFaceDetection() throws -> VerIDCore.FaceDetection
}
@objc public class SpoofingDetection : ObjectiveC.NSObject {
  public enum Status : Swift.Int {
    case ok, movedTooFast, movedOpposite
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public init(angleBearingEvaluation: VerIDCore.AngleBearingEvaluation)
  public func addFace(_ face: VerIDCore.Face)
  public func status(previousBearing: VerIDCore.Bearing, requestedBearing: VerIDCore.Bearing) -> VerIDCore.SpoofingDetection.Status
  public func reset()
  @objc deinit
}
@objc public class FacePresenceDetection : ObjectiveC.NSObject {
  public enum Status : Swift.Int {
    case notFound, found, lost, turnedTooFar
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var status: VerIDCore.FacePresenceDetection.Status {
    get
  }
  public init(maxMissingFaceCount: Swift.Int, angleBearingEvaluation: VerIDCore.AngleBearingEvaluation)
  public func addFace(_ face: VerIDCore.Face?, imageSize: CoreGraphics.CGSize, requestedBearing: VerIDCore.Bearing)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class VerIDFactory : ObjectiveC.NSObject {
  @objc weak public var delegate: VerIDCore.VerIDFactoryDelegate?
  @objc public var faceDetectionFactory: VerIDCore.FaceDetectionFactory {
    @objc get
    @objc set
  }
  @objc public var faceRecognitionFactory: VerIDCore.FaceRecognitionFactory {
    @objc get
    @objc set
  }
  @objc public var userManagementFactory: VerIDCore.UserManagementFactory
  @objc public init(userManagementFactory: VerIDCore.UserManagementFactory)
  @objc override convenience dynamic public init()
  @objc public func createVerID()
  @objc public func createVerIDSync() throws -> VerIDCore.VerID
  public func createVerID(completion: ((VerIDCore.VerID) -> Swift.Void)?)
  @objc deinit
}
@objc public protocol ImageProviderService {
  @objc func dequeueImage() throws -> VerIDCore.VerIDImage
}
@objc public protocol ImageProviderServiceFactory {
  @objc func makeImageProviderService() -> VerIDCore.ImageProviderService
}
@_hasMissingDesignatedInitializers public class FaceTemplateEncryption {
  public func encryptFaceTemplate(_ faceTemplate: VerIDCore.Recognizable) throws -> VerIDCore.Recognizable
  public func decryptFaceTemplate(_ faceTemplate: VerIDCore.Recognizable) throws -> VerIDCore.Recognizable
  @objc deinit
}
@objc public protocol VideoWriterService {
  @objc func writeSampleBuffer(_ sampleBuffer: CoreMedia.CMSampleBuffer, rotation: CoreGraphics.CGFloat)
  @objc func finish(completionBlock: @escaping (Foundation.URL?) -> Swift.Void)
}
@objc public protocol VideoWriterServiceFactory {
  @objc func makeVideoWriterService(url: Foundation.URL) throws -> VerIDCore.VideoWriterService
}
@_inheritsConvenienceInitializers @objc public class VerIDVideoWriterServiceFactory : ObjectiveC.NSObject, VerIDCore.VideoWriterServiceFactory {
  final public let videoScale: Swift.Float
  public init(videoScale: Swift.Float)
  @objc convenience override dynamic public init()
  @objc public func makeVideoWriterService(url: Foundation.URL) throws -> VerIDCore.VideoWriterService
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class VerIDVideoWriterService : ObjectiveC.NSObject, VerIDCore.VideoWriterService {
  @objc public func writeSampleBuffer(_ sampleBuffer: CoreMedia.CMSampleBuffer, rotation: CoreGraphics.CGFloat)
  @objc public func finish(completionBlock: @escaping (Foundation.URL?) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(VerIDSessionResult) public class VerIDSessionResult : ObjectiveC.NSObject, Swift.Codable {
  @objc public var error: Swift.Error? {
    get
  }
  @objc public var attachments: [VerIDCore.DetectedFace] {
    get
  }
  @objc public var videoURL: Foundation.URL?
  @objc public init(error: Swift.Error)
  @objc public init(attachments: [VerIDCore.DetectedFace])
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  @objc public var faces: [VerIDCore.Face] {
    @objc get
  }
  @objc public var facesSuitableForRecognition: [VerIDCore.RecognizableFace] {
    @objc get
  }
  @objc public var imageURLs: [Foundation.URL] {
    @objc get
  }
  public var detectedBearings: Swift.Set<VerIDCore.Bearing> {
    get
  }
  @objc public func faces(withBearing bearing: VerIDCore.Bearing) -> [VerIDCore.Face]
  @objc public func facesSuitableForRecognition(withBearing bearing: VerIDCore.Bearing) -> [VerIDCore.RecognizableFace]
  @objc public func imageURLs(withBearing bearing: VerIDCore.Bearing) -> [Foundation.URL]
  @objc deinit
}
@available(*, deprecated, renamed: "VerIDSessionResult")
public typealias SessionResult = VerIDCore.VerIDSessionResult
@objc public protocol ResultEvaluationService {
  @objc var sessionResult: VerIDCore.VerIDSessionResult { get }
  @objc func addResult(_ result: VerIDCore.FaceDetectionResult, image: VerIDCore.VerIDImage, imageURL: Foundation.URL?) -> VerIDCore.ResultEvaluationStatus
}
@objc public protocol ResultEvaluationServiceFactory {
  @objc func makeResultEvaluationService(settings: VerIDCore.VerIDSessionSettings) -> VerIDCore.ResultEvaluationService
}
@objc public enum ResultEvaluationStatus : Swift.Int {
  case waiting
  case processing
  case finished
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class VerIDResultEvaluationService<T> : VerIDCore.ResultEvaluationService where T : VerIDCore.VerIDSessionSettings {
  @objc public var sessionResult: VerIDCore.VerIDSessionResult {
    get
  }
  @discardableResult
  @objc public func addResult(_ result: VerIDCore.FaceDetectionResult, image: VerIDCore.VerIDImage, imageURL: Foundation.URL?) -> VerIDCore.ResultEvaluationStatus
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VerIDLivenessDetectionEvaluationService<T> : VerIDCore.VerIDResultEvaluationService<T> where T : VerIDCore.LivenessDetectionSessionSettings {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VerIDAuthenticationEvaluationService : VerIDCore.VerIDLivenessDetectionEvaluationService<VerIDCore.AuthenticationSessionSettings> {
  @objc override public func addResult(_ result: VerIDCore.FaceDetectionResult, image: VerIDCore.VerIDImage, imageURL: Foundation.URL?) -> VerIDCore.ResultEvaluationStatus
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VerIDRegistrationEvaluationService : VerIDCore.VerIDResultEvaluationService<VerIDCore.RegistrationSessionSettings> {
  @objc override public func addResult(_ result: VerIDCore.FaceDetectionResult, image: VerIDCore.VerIDImage, imageURL: Foundation.URL?) -> VerIDCore.ResultEvaluationStatus
  @objc deinit
}
@objc public class VerIDResultEvaluationServiceFactory : ObjectiveC.NSObject, VerIDCore.ResultEvaluationServiceFactory {
  @objc final public let environment: VerIDCore.VerID
  @objc public init(environment: VerIDCore.VerID)
  @objc public func makeResultEvaluationService(settings: VerIDCore.VerIDSessionSettings) -> VerIDCore.ResultEvaluationService
  @objc deinit
}
@objc public protocol VerIDFactoryDelegate {
  @objc optional func veridFactory(_ factory: VerIDCore.VerIDFactory, didCreateVerID instance: VerIDCore.VerID)
  @objc func veridFactory(_ factory: VerIDCore.VerIDFactory, didFailWithError error: Swift.Error)
}
@objc public protocol SessionOperationDelegate {
  @objc func operationDidOutputSessionResult(_ result: VerIDCore.VerIDSessionResult, fromFaceDetectionResult faceDetectionResult: VerIDCore.FaceDetectionResult)
  @objc func operationDidFinishWritingImage(_ url: Foundation.URL, forFace face: VerIDCore.Face)
}
@_hasMissingDesignatedInitializers @objc public class VerID : ObjectiveC.NSObject {
  @objc final public let faceDetection: VerIDCore.FaceDetection
  @objc final public let faceRecognition: VerIDCore.FaceRecognition
  @objc final public let userManagement: VerIDCore.UserManagement
  @objc public static let releaseVersion: Swift.String
  @objc deinit
}
@objc public protocol ImageWriterService {
  @objc func writeImage(_ image: VerIDCore.VerIDImage, completion: ((Swift.Error?) -> Swift.Void)?) -> Foundation.URL?
}
@objc public protocol ImageWriterServiceFactory {
  @objc func makeImageWriterService() throws -> VerIDCore.ImageWriterService
}
public enum VerIDImageWriterServiceError : Swift.Error {
  case fileExistsAtDirectory(Swift.String), imageEncodingError
}
@_hasMissingDesignatedInitializers @objc public class VerIDImageWriterService : ObjectiveC.NSObject, VerIDCore.ImageWriterService {
  @objc public func writeImage(_ image: VerIDCore.VerIDImage, completion: ((Swift.Error?) -> Swift.Void)?) -> Foundation.URL?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class VerIDImageWriterServiceFactory : ObjectiveC.NSObject, VerIDCore.ImageWriterServiceFactory {
  @objc final public let imageProcessorFactory: VerIDCore.ImageProcessorServiceFactory
  @objc override dynamic public init()
  @objc public init(imageProcessorFactory: VerIDCore.ImageProcessorServiceFactory)
  @objc public func makeImageWriterService() throws -> VerIDCore.ImageWriterService
  @objc deinit
}
@objc open class AngleBearingEvaluation : ObjectiveC.NSObject {
  final public let sessionSettings: VerIDCore.VerIDSessionSettings
  public var pitchThresholdTolerance: CoreGraphics.CGFloat
  public var yawThresholdTolerance: CoreGraphics.CGFloat
  public init(sessionSettings: VerIDCore.VerIDSessionSettings, pitchThresholdTolerance: CoreGraphics.CGFloat, yawThresholdTolerance: CoreGraphics.CGFloat)
  public func angle(forBearing bearing: VerIDCore.Bearing) -> VerIDCore.EulerAngle
  @objc open func angle(_ angle: VerIDCore.EulerAngle, matchesBearing bearing: VerIDCore.Bearing) -> Swift.Bool
  @objc open func offsetFromAngle(_ from: VerIDCore.EulerAngle, toBearing bearing: VerIDCore.Bearing) -> VerIDCore.EulerAngle
  open func angle(_ angle: VerIDCore.EulerAngle, isBetweenBearing fromBearing: VerIDCore.Bearing, and toBearing: VerIDCore.Bearing) -> Swift.Bool
  @objc deinit
}
@objc public class VerIDFaceDetectionRecognitionFactory : ObjectiveC.NSObject, VerIDCore.FaceDetectionFactory, VerIDCore.FaceRecognitionFactory {
  final public let apiSecret: Swift.String?
  final public let settings: VerIDCore.DetRecLibSettings
  @available(*, deprecated, message: "The method will be removed in version 2.0.0. Please use `faceDetectionImageProcessors` and `faceRecognitionImageProcessors` instead.")
  @objc public var imageProcessors: [VerIDCore.ImageProcessorService] {
    @objc get
    @objc set
  }
  @objc public var faceDetectionImageProcessors: [VerIDCore.ImageProcessorService]
  @objc public var faceRecognitionImageProcessors: [VerIDCore.ImageProcessorService]
  @objc public init(apiSecret: Swift.String?, settings: VerIDCore.DetRecLibSettings? = nil)
  @objc public func createFaceDetection() throws -> VerIDCore.FaceDetection
  @objc public func createFaceRecognition() throws -> VerIDCore.FaceRecognition
  @objc deinit
}
@objc public enum VerIDFaceDetectionRecognitionFactoryError : Swift.Int, Swift.Error {
  case invalidModelsURL
  case failedToInitializeResourceLoader
  case failedToInitializeFaceDetectionRecognition
  case missingImageProcessors
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class VerIDImage : ObjectiveC.NSObject {
  @objc final public let sampleBuffer: CoreMedia.CMSampleBuffer?
  @objc final public let cgImage: CoreGraphics.CGImage?
  @objc final public let orientation: ImageIO.CGImagePropertyOrientation
  @objc public var faceDetectionImage: VerIDCore.FaceDetectionImage? {
    get
  }
  @objc public var imageProcessorName: Swift.String? {
    get
  }
  @objc public init(sampleBuffer: CoreMedia.CMSampleBuffer, orientation: ImageIO.CGImagePropertyOrientation)
  @objc public init(cgImage: CoreGraphics.CGImage, orientation: ImageIO.CGImagePropertyOrientation)
  @objc convenience public init?(url: Foundation.URL)
  public init(grayscalePixels: [Swift.UInt8], size: CoreGraphics.CGSize)
  @objc public init?(uiImage: UIKit.UIImage)
  public var grayscalePixels: [Swift.UInt8]?
  public var argbPixels: [Swift.UInt8]?
  public var rgbPixels: [Swift.UInt8]?
  public var size: CoreGraphics.CGSize?
  @objc public var grayscaleImageProcessorName: Swift.String?
  @objc deinit
}
@objc public enum VerIDError : Swift.Int, Foundation.LocalizedError {
  case invalidAPISecret, invalidAPIKey, sdkAuthorizationTimeout, sdkAuthorizationRequestError, sdkAuthorizationResponseParseError, sdkAuthenticationRequestEncodingError, sdkAuthenticationRequestError, sdkAuthenticationResponseParseError, sdkAuthenticationTimeout
  case sessionTimeout
  case invalidAuthUrl
  case unknownError
  public var errorDescription: Swift.String? {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum HttpStatusError : Foundation.LocalizedError {
  case unexpectedHttpStatus(status: Swift.Int)
  public var errorDescription: Swift.String? {
    get
  }
}
@objc public enum FaceDetectionError : Swift.Int, Swift.Error {
  case faceNotFound, faceLost, internalError, faceTurnedOpposite, faceTurnedTooFast
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum FaceRecognitionError : Swift.Int, Swift.Error {
  case templateExtractionFailed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ImageProcessingError : Swift.Int, Swift.Error {
  case grayscaleConversionError, imageProcessorTaskError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum ResultEvaluationError : Foundation.LocalizedError {
  case missingSuitableFaces, similarityScoreTooLow(score: Swift.Double, required: Swift.Double), timeout, userNotRegistered(userId: Swift.String)
}
public enum InvalidParameterError : Foundation.LocalizedError {
  case arrayEmptyError(name: Swift.String)
  case invalidArrayLengthError(name: Swift.String, length: Swift.Int, requiredLength: Swift.Int)
}
@objc public enum DatabaseError : Swift.Int, Swift.Error {
  case failedToOpenDatabase, failedToPrepareStatement, failedToBindText
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc(VerIDFaceRecognition) public protocol FaceRecognition {
  @objc var authenticationScoreThreshold: Foundation.NSNumber { get set }
  @objc var maxAuthenticationScore: Foundation.NSNumber { get }
  @objc func compareSubjectFaces(_ subjectFaces: [VerIDCore.Recognizable], toFaces faces: [VerIDCore.Recognizable]) throws -> Foundation.NSNumber
  @objc func createRecognizableFacesFromFaces(_ faces: [VerIDCore.Face], inImage image: VerIDCore.VerIDImage) throws -> [VerIDCore.Recognizable]
}
@_inheritsConvenienceInitializers @objc(VerIDEulerAngle) public class EulerAngle : ObjectiveC.NSObject, Swift.Codable {
  @objc public var yaw: CoreGraphics.CGFloat
  @objc public var pitch: CoreGraphics.CGFloat
  @objc public var roll: CoreGraphics.CGFloat
  @objc override dynamic public init()
  public init(yaw: CoreGraphics.CGFloat, pitch: CoreGraphics.CGFloat, roll: CoreGraphics.CGFloat)
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(VerIDFaceDetection) public protocol FaceDetection {
  @objc func startFaceTracking() -> VerIDCore.FaceTracking
  @objc func detectFacesInImage(_ image: VerIDCore.VerIDImage, limit: Swift.Int32, options: Swift.UInt) throws -> [VerIDCore.Face]
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 10.0, *)
public class VerIDUserManagement : ObjectiveC.NSObject, VerIDCore.UserManagement {
  final public let faceTemplateEncryption: VerIDCore.FaceTemplateEncryption
  final public let isEncryptionDisabled: Swift.Bool
  @objc public func assignFaces(_ faces: [VerIDCore.Recognizable], toUser userId: Swift.String, completion: VerIDCore.VerIDUserManagement.ErrorCallback? = nil)
  @objc public func deleteFaces(_ faces: [VerIDCore.Recognizable], completion: ((Swift.Error?) -> Swift.Void)? = nil)
  @objc public func users() throws -> [Swift.String]
  @objc public func facesOfUser(_ userId: Swift.String) throws -> [VerIDCore.Recognizable]
  @objc public func faces() throws -> [VerIDCore.Recognizable]
  @objc public func deleteUsers(_ userIds: [Swift.String], completion: ((Swift.Error?) -> Swift.Void)? = nil)
  @objc deinit
}
@available(iOS 10.3, *)
public class Report : Swift.Codable {
  final public let appId: Swift.String
  final public let certSerial: Swift.UInt64?
  final public let instanceId: Swift.String
  final public let deviceOs: Swift.String
  final public let osVersion: Swift.String
  public var sessions: [VerIDCore.SessionReport]
  public var functionCalls: [VerIDCore.FunctionCallReport]
  final public let veridVersion: Swift.String?
  public init(identity: VerIDSDKIdentity.VerIDIdentity)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public var isEmpty: Swift.Bool {
    get
  }
  @objc deinit
}
@objc(VerIDLivenessDetection) public enum LivenessDetection : Swift.Int, Swift.Codable {
  case none
  case regular
  case strict
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol ImageProcessorService {
  @objc func prepareImageForFaceDetection(_ image: VerIDCore.VerIDImage, recalculate: Swift.Bool) throws
  @objc func cgImageFromVerIDImage(_ image: VerIDCore.VerIDImage) throws -> CoreGraphics.CGImage
  @objc var name: Swift.String? { get }
}
@objc public protocol ImageProcessorServiceFactory {
  @objc func makeImageProcessorService() throws -> VerIDCore.ImageProcessorService
}
@objc public class VerIDImageProcessorServiceFactory : ObjectiveC.NSObject, VerIDCore.ImageProcessorServiceFactory {
  @objc public init(adjustmentProvider: VerIDCore.ImageAdjustmentProvider)
  @objc public func makeImageProcessorService() throws -> VerIDCore.ImageProcessorService
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class ImageAdjustmentProvider : ObjectiveC.NSObject {
  @objc open var name: Swift.String {
    @objc get
  }
  @objc open func adjustImageBuffer(_ buffer: [Swift.UInt8], size: CoreGraphics.CGSize) throws -> [Swift.UInt8]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class ImageAdjustmentHistogramSpec : VerIDCore.ImageAdjustmentProvider {
  @objc override open var name: Swift.String {
    @objc get
  }
  @objc override open func adjustImageBuffer(_ buffer: [Swift.UInt8], size: CoreGraphics.CGSize) throws -> [Swift.UInt8]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ImageAdjustmentBrighten : VerIDCore.ImageAdjustmentHistogramSpec {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ImageAdjustmentEqualize : VerIDCore.ImageAdjustmentProvider {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override public func adjustImageBuffer(_ buffer: [Swift.UInt8], size: CoreGraphics.CGSize) throws -> [Swift.UInt8]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class PassThroughImageProcessorService : VerIDCore.VerIDImageProcessorService {
  @objc override public func prepareImageForFaceDetection(_ image: VerIDCore.VerIDImage, recalculate: Swift.Bool) throws
  @objc override public var name: Swift.String? {
    @objc get
  }
  @objc override public init(imageAdjustmentProvider: VerIDCore.ImageAdjustmentProvider)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class VerIDImageProcessorService : ObjectiveC.NSObject, VerIDCore.ImageProcessorService {
  @objc final public let imageAdjustmentProvider: VerIDCore.ImageAdjustmentProvider
  @objc public var name: Swift.String? {
    @objc get
  }
  @objc convenience override dynamic public init()
  @objc public init(imageAdjustmentProvider: VerIDCore.ImageAdjustmentProvider)
  @objc public func prepareImageForFaceDetection(_ image: VerIDCore.VerIDImage, recalculate: Swift.Bool) throws
  @objc public func cgImageFromVerIDImage(_ image: VerIDCore.VerIDImage) throws -> CoreGraphics.CGImage
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VerIDUserManagementiOS9 : ObjectiveC.NSObject, VerIDCore.UserManagement {
  @objc public func assignFaces(_ faces: [VerIDCore.Recognizable], toUser userId: Swift.String, completion: VerIDCore.VerIDUserManagementiOS9.ErrorCallback? = nil)
  @objc public func deleteFaces(_ faces: [VerIDCore.Recognizable], completion: ((Swift.Error?) -> Swift.Void)? = nil)
  @objc public func users() throws -> [Swift.String]
  @objc public func facesOfUser(_ userId: Swift.String) throws -> [VerIDCore.Recognizable]
  @objc public func faces() throws -> [VerIDCore.Recognizable]
  @objc public func deleteUsers(_ userIds: [Swift.String], completion: ((Swift.Error?) -> Swift.Void)? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers public class AngleSmoothing : VerIDCore.Smoothing<VerIDCore.EulerAngle> {
  override public init(bufferSize: Swift.Int)
  override public func addSample(_ sample: VerIDCore.EulerAngle)
  override public func reset()
  @objc deinit
}
public typealias Face = VerIDCore.VerIDFace
@_inheritsConvenienceInitializers @objc public class VerIDFace : ObjectiveC.NSObject, Swift.Codable {
  @objc public var bounds: CoreGraphics.CGRect
  @objc public var angle: VerIDCore.EulerAngle
  @objc public var quality: CoreGraphics.CGFloat
  @objc public var leftEye: CoreGraphics.CGPoint
  @objc public var rightEye: CoreGraphics.CGPoint
  @objc public var data: Foundation.Data
  @objc public var landmarks: [CoreGraphics.CGPoint]
  @objc override dynamic public init()
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc(VerIDUserIdentification) public class UserIdentification : ObjectiveC.NSObject {
  @objc final public let verid: VerIDCore.VerID
  @objc public init(verid: VerIDCore.VerID)
  @objc public func identifyUsersInFace(_ face: VerIDCore.Recognizable) throws -> [Swift.String : Swift.Float]
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class VerIDFaceDetection : ObjectiveC.NSObject, VerIDCore.FaceDetection {
  @objc public var faceExtractQualityThreshold: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var landmarkTrackingQualityThreshold: Swift.Float {
    @objc get
    @objc set
  }
  @objc final public let detRecLib: VerIDCore.DetRecLib
  @objc public var imageProcessors: [VerIDCore.ImageProcessorService]
  @objc public func detectFacesInImage(_ image: VerIDCore.VerIDImage, limit: Swift.Int32, options: Swift.UInt) throws -> [VerIDCore.Face]
  @objc public func startFaceTracking() -> VerIDCore.FaceTracking
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class VerIDFaceTracking : ObjectiveC.NSObject, VerIDCore.FaceTracking {
  @objc public func trackFaceInImage(_ image: VerIDCore.VerIDImage) throws -> VerIDCore.Face
  @objc deinit
}
public class SessionReport : VerIDCore.Transaction {
  public enum SessionPurpose : Swift.String, Swift.Codable {
    case livenessDetection, registration, authentication
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct SessionSettings : Swift.Codable {
    public let numberOfResultsToCollect: Swift.Int
    public let expiryTime: Foundation.TimeInterval
    public let useFrontCamera: Swift.Bool
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public init(purpose: VerIDCore.SessionReport.SessionPurpose, duration: Foundation.TimeInterval, settings: VerIDCore.SessionReport.SessionSettings, time: Foundation.Date, error: Swift.String? = nil)
  public init(sessionSettings: VerIDCore.VerIDSessionSettings, result: VerIDCore.VerIDSessionResult, duration: Foundation.TimeInterval, time: Foundation.Date)
  required public init(from decoder: Swift.Decoder) throws
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc(VerIDDetectedFace) public class DetectedFace : ObjectiveC.NSObject, Swift.Codable {
  @objc public var face: VerIDCore.Face
  @objc public var bearing: VerIDCore.Bearing
  @objc public var imageURL: Foundation.URL?
  @objc public init(face: VerIDCore.Face, bearing: VerIDCore.Bearing, imageURL: Foundation.URL? = nil)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@objc(VerIDBearing) public enum Bearing : Swift.Int, Swift.Codable, Swift.CaseIterable, Swift.Equatable {
  case straight
  case up
  case rightUp
  case right
  case rightDown
  case down
  case leftDown
  case left
  case leftUp
  public var stringValue: Swift.String {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [VerIDCore.Bearing]
  public typealias RawValue = Swift.Int
  public static var allCases: [VerIDCore.Bearing] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension VerIDCore.VerIDFactory {
  @available(iOS 10.3, *)
  @objc convenience dynamic public init(veridPassword: Swift.String)
  @available(iOS 10.3, *)
  @objc convenience dynamic public init(identity: VerIDSDKIdentity.VerIDIdentity)
}
extension VerIDCore.FaceDetectionStatus : Swift.Equatable {}
extension VerIDCore.FaceDetectionStatus : Swift.Hashable {}
extension VerIDCore.FaceDetectionStatus : Swift.RawRepresentable {}
extension VerIDCore.VerIDFaceDetectionServiceError : Swift.Equatable {}
extension VerIDCore.VerIDFaceDetectionServiceError : Swift.Hashable {}
extension VerIDCore.VerIDFaceDetectionServiceError : Swift.RawRepresentable {}
extension VerIDCore.Axis : Swift.Equatable {}
extension VerIDCore.Axis : Swift.Hashable {}
extension VerIDCore.Axis : Swift.RawRepresentable {}
extension VerIDCore.VerIDFaceDetectionServiceFactoryError : Swift.Equatable {}
extension VerIDCore.VerIDFaceDetectionServiceFactoryError : Swift.Hashable {}
extension VerIDCore.VerIDFaceDetectionServiceFactoryError : Swift.RawRepresentable {}
extension VerIDCore.ImageUtilError : Swift.Equatable {}
extension VerIDCore.ImageUtilError : Swift.Hashable {}
extension VerIDCore.FaceAlignmentDetection.Status : Swift.Equatable {}
extension VerIDCore.FaceAlignmentDetection.Status : Swift.Hashable {}
extension VerIDCore.FaceAlignmentDetection.Status : Swift.RawRepresentable {}
extension VerIDCore.FunctionCallReport.Function : Swift.Equatable {}
extension VerIDCore.FunctionCallReport.Function : Swift.Hashable {}
extension VerIDCore.FunctionCallReport.Function : Swift.RawRepresentable {}
extension VerIDCore.SessionOperation.SessionOperationError : Swift.Equatable {}
extension VerIDCore.SessionOperation.SessionOperationError : Swift.Hashable {}
extension VerIDCore.SessionOperation.SessionOperationError : Swift.RawRepresentable {}
extension VerIDCore.RecognitionFace.Version : Swift.Equatable {}
extension VerIDCore.RecognitionFace.Version : Swift.Hashable {}
extension VerIDCore.RecognitionFace.Version : Swift.RawRepresentable {}
extension VerIDCore.SpoofingDetection.Status : Swift.Equatable {}
extension VerIDCore.SpoofingDetection.Status : Swift.Hashable {}
extension VerIDCore.SpoofingDetection.Status : Swift.RawRepresentable {}
extension VerIDCore.FacePresenceDetection.Status : Swift.Equatable {}
extension VerIDCore.FacePresenceDetection.Status : Swift.Hashable {}
extension VerIDCore.FacePresenceDetection.Status : Swift.RawRepresentable {}
extension VerIDCore.ResultEvaluationStatus : Swift.Equatable {}
extension VerIDCore.ResultEvaluationStatus : Swift.Hashable {}
extension VerIDCore.ResultEvaluationStatus : Swift.RawRepresentable {}
extension VerIDCore.VerIDFaceDetectionRecognitionFactoryError : Swift.Equatable {}
extension VerIDCore.VerIDFaceDetectionRecognitionFactoryError : Swift.Hashable {}
extension VerIDCore.VerIDFaceDetectionRecognitionFactoryError : Swift.RawRepresentable {}
extension VerIDCore.VerIDError : Swift.Equatable {}
extension VerIDCore.VerIDError : Swift.Hashable {}
extension VerIDCore.VerIDError : Swift.RawRepresentable {}
extension VerIDCore.FaceDetectionError : Swift.Equatable {}
extension VerIDCore.FaceDetectionError : Swift.Hashable {}
extension VerIDCore.FaceDetectionError : Swift.RawRepresentable {}
extension VerIDCore.FaceRecognitionError : Swift.Equatable {}
extension VerIDCore.FaceRecognitionError : Swift.Hashable {}
extension VerIDCore.FaceRecognitionError : Swift.RawRepresentable {}
extension VerIDCore.ImageProcessingError : Swift.Equatable {}
extension VerIDCore.ImageProcessingError : Swift.Hashable {}
extension VerIDCore.ImageProcessingError : Swift.RawRepresentable {}
extension VerIDCore.DatabaseError : Swift.Equatable {}
extension VerIDCore.DatabaseError : Swift.Hashable {}
extension VerIDCore.DatabaseError : Swift.RawRepresentable {}
extension VerIDCore.LivenessDetection : Swift.Equatable {}
extension VerIDCore.LivenessDetection : Swift.Hashable {}
extension VerIDCore.LivenessDetection : Swift.RawRepresentable {}
extension VerIDCore.SessionReport.SessionPurpose : Swift.Equatable {}
extension VerIDCore.SessionReport.SessionPurpose : Swift.Hashable {}
extension VerIDCore.SessionReport.SessionPurpose : Swift.RawRepresentable {}
extension VerIDCore.Bearing : Swift.Hashable {}
extension VerIDCore.Bearing : Swift.RawRepresentable {}
