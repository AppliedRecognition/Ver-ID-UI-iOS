// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VerIDSerialization
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreGraphics
import Foundation
import Swift
import SwiftProtobuf
import UIKit
import VerIDCore
@_exported import VerIDSerialization
import _Concurrency
import _StringProcessing
extension VerIDCore.VerIDFace : VerIDSerialization.Serializable {
  public func serialized() throws -> Foundation.Data
}
public enum SerializationError : Swift.Int, Swift.Error {
  case imageDeserializationFailed
  case imageSerializationFailed
  case expectedAtLeastOneFace
  case imageCroppingFailed
  case deserializationUnavailableForType
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension VerIDCore.Image : VerIDSerialization.Serializable {
  public func serialized() throws -> Foundation.Data
}
extension VerIDCore.SystemInfo : VerIDSerialization.Serializable {
  public func serialized() throws -> Foundation.Data
}
@_hasMissingDesignatedInitializers public class Deserializer {
  public static func deserialize<T>(_ serialized: Foundation.Data) throws -> T where T : VerIDSerialization.Serializable
  @objc deinit
}
public struct Registration : VerIDSerialization.Serializable {
  public let faces: [VerIDCore.Recognizable]
  public let image: UIKit.UIImage
  public let systemInfo: VerIDCore.SystemInfo
  public init(faces: [VerIDCore.Recognizable], image: UIKit.UIImage, systemInfo: VerIDCore.SystemInfo) throws
  public func serialized() throws -> Foundation.Data
}
public struct ImageMetadata : VerIDSerialization.Serializable {
  public let date: Foundation.Date
  public let deviceInfo: VerIDCore.DeviceInfo
  public init(date: Foundation.Date, deviceInfo: VerIDCore.DeviceInfo)
  public func serialized() throws -> Foundation.Data
}
public protocol Serializable {
  func serialized() throws -> Foundation.Data
}
public struct Capture : VerIDSerialization.Serializable {
  public let date: Foundation.Date
  public let image: VerIDCore.Image
  public let faces: [VerIDCore.RecognizableFace]
  public let uiImage: UIKit.UIImage
  public let systemInfo: VerIDCore.SystemInfo
  public let imageMetadata: VerIDSerialization.ImageMetadata?
  public init(date: Foundation.Date, image: VerIDCore.Image, faces: [VerIDCore.RecognizableFace], uiImage: UIKit.UIImage, systemInfo: VerIDCore.SystemInfo, imageMetadata: VerIDSerialization.ImageMetadata? = nil) throws
  public func serialized() throws -> Foundation.Data
}
extension VerIDSerialization.SerializationError : Swift.Equatable {}
extension VerIDSerialization.SerializationError : Swift.Hashable {}
extension VerIDSerialization.SerializationError : Swift.RawRepresentable {}
