// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VerIDCore
import AVFoundation
import Accelerate
import CommonCrypto
import CoreAudio
import CoreData
import CoreGraphics
import CoreMedia
import DeviceKit
import Foundation
import MobileCoreServices
import RxSwift
import SQLite3
import Security
import Swift
import UIKit
@_exported import VerIDCore
import VerIDSDKIdentity
import ZIPFoundation
import _Concurrency
import os
import os.signpost
@_inheritsConvenienceInitializers @objc(VerIDSessionSettings) public class VerIDSessionSettings : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @available(*, unavailable, message: "Please use session delegate")
  @objc public var showResult: Swift.Bool
  @VerIDCore.Clamped @objc public var faceCaptureCount: Swift.Int {
    @objc get
    @objc set
    _modify
  }
  @available(*, unavailable, renamed: "faceCaptureCount")
  @objc public var numberOfResultsToCollect: Swift.Int
  @objc public var maxDuration: Swift.Double
  @available(*, unavailable, renamed: "maxDuration")
  @objc public var expiryTime: Swift.Double
  @available(*, unavailable, message: "Please use session delegate")
  @objc public var videoURL: Foundation.URL?
  @available(*, unavailable, message: "As of 2.0 all facess now include face templates")
  @objc public var includeFaceTemplatesInResult: Swift.Bool
  @available(*, unavailable, message: "Please use session delegate")
  @objc public var speakPrompts: Swift.Bool
  @VerIDCore.Clamped @objc public var yawThreshold: CoreGraphics.CGFloat {
    @objc get
    @objc set
    _modify
  }
  @VerIDCore.Clamped @objc public var pitchThreshold: CoreGraphics.CGFloat {
    @objc get
    @objc set
    _modify
  }
  @available(*, unavailable, renamed: "expectedFaceExtents")
  @objc public var faceBoundsFraction: CoreGraphics.CGSize
  @VerIDCore.Clamped @objc public var expectedFaceExtents: VerIDCore.FaceExtents {
    @objc get
    @objc set
    _modify
  }
  @available(*, unavailable, message: "Please use session delegate")
  @objc public var useFrontCamera: Swift.Bool
  @available(*, unavailable, renamed: "faceCaptureFaceCount")
  @objc public var faceBufferSize: Swift.Int
  @VerIDCore.Clamped @objc public var faceCaptureFaceCount: Swift.Int {
    @objc get
    @objc set
    _modify
  }
  @VerIDCore.Clamped @objc public var pauseDuration: Swift.Double {
    @objc get
    @objc set
    _modify
  }
  @objc public var isSessionDiagnosticsEnabled: Swift.Bool
  @objc public var isFaceCoveringDetectionEnabled: Swift.Bool
  @objc override dynamic public init()
  @objc public init(maxDuration: Foundation.TimeInterval = 30.0, faceCaptureCount: Swift.Int = 1)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc(VerIDLivenessDetectionSessionSettings) public class LivenessDetectionSessionSettings : VerIDCore.VerIDSessionSettings {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public static let defaultBearings: Swift.Set<VerIDCore.Bearing>
  public var bearings: Swift.Set<VerIDCore.Bearing>
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc(VerIDAuthenticationSessionSettings) public class AuthenticationSessionSettings : VerIDCore.LivenessDetectionSessionSettings {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc final public let userId: Swift.String
  @objc public init(userId: Swift.String)
  required public init(from decoder: Swift.Decoder) throws
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc(VerIDRegistrationSessionSettings) public class RegistrationSessionSettings : VerIDCore.VerIDSessionSettings {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public var bearingsToRegister: [VerIDCore.Bearing]
  @objc public func setRawBearingsToRegister(_ bearings: Swift.Array<Swift.Int>)
  @objc final public let userId: Swift.String
  @objc public init(userId: Swift.String, showResult: Swift.Bool = false)
  required public init(from decoder: Swift.Decoder) throws
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@available(*, deprecated, renamed: "VerIDSessionSettings")
public typealias SessionSettings = VerIDCore.VerIDSessionSettings
public class SessionDiagnostics : Swift.Codable {
  public var imageInfo: [VerIDCore.DiagnosticImageInfo] {
    get
  }
  public init()
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DiagnosticImageInfo : Swift.Codable {
  final public let face: VerIDCore.Face?
  final public let imageSize: CoreGraphics.CGSize
  final public let requestedBearing: VerIDCore.Bearing
  final public let timestamp: Foundation.Date
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class VerIDFaceRecognition : ObjectiveC.NSObject, VerIDCore.FaceRecognition {
  @objc final public let detRecLib: VerIDCore.DetRecLib
  @objc public var authenticationScoreThreshold: Foundation.NSNumber {
    @objc get
    @objc set
  }
  @objc public var autoRegistrationScoreThreshold: Foundation.NSNumber
  @objc final public let maxAuthenticationScore: Foundation.NSNumber
  @objc public var imageProcessors: [VerIDCore.ImageProcessorService]
  @objc final public let defaultFaceTemplateVersion: VerIDCore.VerIDFaceTemplateVersion
  @objc public func authenticationScoreThreshold(faceTemplateVersion: VerIDCore.VerIDFaceTemplateVersion) -> Foundation.NSNumber
  @objc public func setAuthenticationScoreThreshold(_ value: Foundation.NSNumber, faceTemplateVersion: VerIDCore.VerIDFaceTemplateVersion)
  @objc public func createRecognizableFacesFromFaces(_ faces: [VerIDCore.Face], inImage image: VerIDCore.VerIDImage, faceTemplateVersion: VerIDCore.VerIDFaceTemplateVersion) throws -> [VerIDCore.Recognizable]
  @objc public func createRecognizableFacesFromFaces(_ faces: [VerIDCore.Face], inImage image: VerIDCore.VerIDImage) throws -> [VerIDCore.Recognizable]
  @objc public func compareSubjectFaces(_ subjectFaces: [VerIDCore.Recognizable], toFaces faces: [VerIDCore.Recognizable]) throws -> Foundation.NSNumber
  @objc public func rawFaceTemplate(fromFace face: VerIDCore.Recognizable) throws -> [Foundation.NSNumber]
  @objc public func generateRandomFaceTemplate(version: VerIDCore.VerIDFaceTemplateVersion) throws -> VerIDCore.Recognizable
  @objc public func generateRandomFaceTemplateWithScore(_ score: Foundation.NSNumber, againstFace face: VerIDCore.Recognizable) throws -> VerIDCore.Recognizable
  public func versionOfFaceTemplate(_ faceTemplate: VerIDCore.Recognizable) throws -> VerIDCore.VerIDFaceTemplateVersion
  @objc deinit
}
@objc public class Session : ObjectiveC.NSObject {
  final public let verID: VerIDCore.VerID
  final public let imageObservable: RxSwift.Observable<(VerIDCore.VerIDImage, VerIDCore.FaceBounds)>
  final public let settings: VerIDCore.VerIDSessionSettings
  public var delegate: VerIDCore.SessionDelegate?
  public var videoWriterService: VerIDCore.VideoWriterService?
  public var isFaceWithBoundsFixedInImageSize: ((CoreGraphics.CGRect, CoreGraphics.CGRect) -> Swift.Bool)?
  public var sessionFunctions: VerIDCore.SessionFunctions
  public init(verID: VerIDCore.VerID, settings: VerIDCore.VerIDSessionSettings, imageObservable: RxSwift.Observable<(VerIDCore.VerIDImage, VerIDCore.FaceBounds)>)
  public func start()
  public func cancel()
  @objc deinit
}
@objc public protocol SessionDelegate {
  @objc func session(_ session: VerIDCore.Session, didFinishWithResult result: VerIDCore.VerIDSessionResult)
  @objc optional func session(_ session: VerIDCore.Session, didProduceFaceDetectionResult result: VerIDCore.FaceDetectionResult)
  @objc optional func session(_ session: VerIDCore.Session, didProduceFaceCapture faceCapture: VerIDCore.FaceCapture)
}
extension RxSwift.ObservableType {
  public func mapConcurrently<Result>(_ transform: @escaping (Self.Element) throws -> Result) -> RxSwift.Observable<Result>
  public func scanConcurrently<Result>(into seed: Result, accumulator: @escaping (inout Result, Self.Element) throws -> Swift.Void) -> RxSwift.Observable<Result>
}
@objc public class FaceDetectionImage : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let data: [Swift.UInt8]
  @objc final public let format: VerIDCore.VerIDImageFormat
  @objc final public let orientation: ImageIO.CGImagePropertyOrientation
  @objc final public let size: CoreGraphics.CGSize
  @objc final public let bytesPerRow: Swift.UInt
  public init(data: [Swift.UInt8], format: VerIDCore.VerIDImageFormat, orientation: ImageIO.CGImagePropertyOrientation, size: CoreGraphics.CGSize, bytesPerRow: Swift.UInt)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc(VerIDClassifier) public class Classifier : ObjectiveC.NSObject {
  @objc final public let name: Swift.String
  @objc final public let filename: Swift.String?
  @objc public static let faceCovering: VerIDCore.Classifier
  @objc public init(name: Swift.String, filename: Swift.String? = nil)
  @objc deinit
}
@objc(VerIDRecognizableFace) public class RecognizableFace : VerIDCore.Face, VerIDCore.Recognizable {
  @objc public var recognitionData: Foundation.Data
  @objc public var version: Swift.Int32
  @objc public init(face: VerIDCore.Face, recognitionData: Foundation.Data, version: Swift.Int32 = 1)
  required public init(from decoder: Swift.Decoder) throws
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class VerIDUserManagementFactory : ObjectiveC.NSObject, VerIDCore.UserManagementFactory {
  @objc final public let disableEncryption: Swift.Bool
  @objc final public let isAutomaticFaceTemplateMigrationEnabled: Swift.Bool
  @objc convenience override dynamic public init()
  @objc convenience public init(disableEncryption: Swift.Bool)
  @objc public init(disableEncryption: Swift.Bool, isAutomaticFaceTemplateMigrationEnabled: Swift.Bool)
  @objc public func createUserManagement() throws -> VerIDCore.UserManagement
  @objc deinit
}
@objc(VerIDUserManagement) public protocol UserManagement {
  typealias ErrorCallback = (Swift.Error?) -> Swift.Void
  @objc func assignFaces(_ faces: [VerIDCore.Recognizable], toUser userId: Swift.String, completion: Self.ErrorCallback?)
  @objc func deleteFaces(_ faces: [VerIDCore.Recognizable], completion: Self.ErrorCallback?)
  @objc func users() throws -> [Swift.String]
  @objc func facesOfUser(_ userId: Swift.String) throws -> [VerIDCore.Recognizable]
  @objc func faces() throws -> [VerIDCore.Recognizable]
  @objc func deleteUsers(_ userIds: [Swift.String], completion: Self.ErrorCallback?)
  @objc func userInFace(_ face: VerIDCore.Recognizable) throws -> Swift.String
}
@objc(VerIDUserManagement2) public protocol UserManagement2 : VerIDCore.UserManagement {
  @objc func users(faceTemplateVersion: VerIDCore.VerIDFaceTemplateVersion) throws -> [Swift.String]
  @objc func faces(faceTemplateVersion: VerIDCore.VerIDFaceTemplateVersion) throws -> [VerIDCore.Recognizable]
  @objc func facesOfUser(_ userId: Swift.String, faceTemplateVersion: VerIDCore.VerIDFaceTemplateVersion) throws -> [VerIDCore.Recognizable]
  @objc func countFacesWithVersion(_ version: VerIDCore.VerIDFaceTemplateVersion) throws -> Foundation.NSNumber
  @objc optional func addUsersWithFaces(_ userFaces: [Swift.String : [VerIDCore.Recognizable]], completion: Self.ErrorCallback?)
}
@objc(VerIDUserManagementFactory) public protocol UserManagementFactory {
  @objc func createUserManagement() throws -> VerIDCore.UserManagement
}
@propertyWrapper public struct Clamped<T> where T : Swift.Comparable {
  public var wrappedValue: T {
    get
    set
  }
  public init(wrappedValue: T, _ range: Swift.ClosedRange<T>)
}
@_inheritsConvenienceInitializers @objc(VerIDImageUtil) public class ImageUtil : ObjectiveC.NSObject {
  @objc public static func grayscaleImage(from image: UIKit.UIImage) throws -> UIKit.UIImage
  public static func grayscaleBufferFromVerIDImage(_ image: VerIDCore.VerIDImage) throws -> (buffer: [Swift.UInt8], size: CoreGraphics.CGSize)
  public static func argbBufferFromVerIDImage(_ image: VerIDCore.VerIDImage) throws -> (buffer: [Swift.UInt8], size: CoreGraphics.CGSize)
  public static func rgbBufferFromVerIDImage(_ image: VerIDCore.VerIDImage) throws -> (buffer: [Swift.UInt8], size: CoreGraphics.CGSize)
  public static func cgImageFromVerIDImage(_ image: VerIDCore.VerIDImage) -> CoreGraphics.CGImage?
  public static func cgImageFromSampleBuffer(_ sampleBuffer: CoreMedia.CMSampleBuffer, orientation: ImageIO.CGImagePropertyOrientation) -> CoreGraphics.CGImage?
  public static func sizeOfVerIDImage(_ image: VerIDCore.VerIDImage) throws -> CoreGraphics.CGSize
  public static func rgbFromSampleBuffer(_ sampleBuffer: CoreMedia.CMSampleBuffer, orientation: ImageIO.CGImagePropertyOrientation) throws -> (buffer: [Swift.UInt8], size: CoreGraphics.CGSize)
  public static func rgbFromCGImage(_ image: CoreGraphics.CGImage, orientation: ImageIO.CGImagePropertyOrientation) throws -> (buffer: [Swift.UInt8], size: CoreGraphics.CGSize)
  public static func argbFromSampleBuffer(_ sampleBuffer: CoreMedia.CMSampleBuffer, orientation: ImageIO.CGImagePropertyOrientation) throws -> (buffer: [Swift.UInt8], size: CoreGraphics.CGSize)
  public static func grayscaleBufferFromSampleBuffer(_ sampleBuffer: CoreMedia.CMSampleBuffer, orientation: ImageIO.CGImagePropertyOrientation) throws -> (buffer: [Swift.UInt8], size: CoreGraphics.CGSize)
  public static func grayscaleBufferFromCGImage(_ image: CoreGraphics.CGImage, orientation: ImageIO.CGImagePropertyOrientation) throws -> (buffer: [Swift.UInt8], size: CoreGraphics.CGSize)
  public static func argbBufferFromCGImage(_ image: CoreGraphics.CGImage, orientation: ImageIO.CGImagePropertyOrientation) throws -> (buffer: [Swift.UInt8], size: CoreGraphics.CGSize)
  @objc public static func sharpnessOfImage(_ image: CoreGraphics.CGImage, orientation: ImageIO.CGImagePropertyOrientation) -> Swift.Double
  @objc public static func brightnessContrastAndSharpnessOfImage(_ image: CoreGraphics.CGImage, orientation: ImageIO.CGImagePropertyOrientation) throws -> VerIDCore.ImageQualityParams
  @objc override dynamic public init()
  @objc deinit
}
public enum ImageUtilError : Swift.Error {
  case cgImageConversionError, vImageBufferInitializationError, grayscaleConversionError, cgImageFromBufferError, pixelBufferInitializationError, pixelBufferAddressError, imageMatrixMultiplyError, getAddressOfPlaneError, unsupportedPixelFormat, imageRotationError, invalidVerIDImage, channelPermutationError, yuvConversionError, rgbConversionError, imageAdjustmentError
  public static func == (a: VerIDCore.ImageUtilError, b: VerIDCore.ImageUtilError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class FaceAlignmentDetection : ObjectiveC.NSObject {
  public enum Status : Swift.Int {
    case found, fixed, aligned, misaligned
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @VerIDCore.Atomic public var status: VerIDCore.FaceAlignmentDetection.Status {
    get
    set
    _modify
  }
  public var facePresence: VerIDCore.FacePresenceDetection?
  @objc deinit
}
public class Transaction : Swift.Codable {
  final public let time: Foundation.Date
  final public let error: Swift.String?
  public init(time: Foundation.Date, error: Swift.String? = nil)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc(VerIDFaceTracking) public protocol FaceTracking {
  @objc func trackFaceInImage(_ image: VerIDCore.VerIDImage) throws -> VerIDCore.Face
}
@objc public enum FaceDetectionStatus : Swift.Int, Swift.Codable, Swift.CaseIterable {
  case started, failed, faceFound, faceFixed, faceMisaligned, faceAligned, faceLost, faceTurnedTooFar, faceTurnedOpposite, movedTooFast
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [VerIDCore.FaceDetectionStatus]
  public typealias RawValue = Swift.Int
  public static var allCases: [VerIDCore.FaceDetectionStatus] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class FaceDetectionResult : ObjectiveC.NSObject, Swift.Codable {
  @objc public var face: VerIDCore.Face?
  @objc public var faceBounds: CoreGraphics.CGRect
  @objc public var faceAngle: VerIDCore.EulerAngle?
  @objc public var faceLandmarks: [CoreGraphics.CGPoint]
  @objc public var status: VerIDCore.FaceDetectionStatus
  @objc final public let requestedBearing: VerIDCore.Bearing
  @objc final public let image: VerIDCore.VerIDImage
  public var defaultFaceBounds: VerIDCore.FaceBounds
  public var offsetAngleFromBearing: VerIDCore.EulerAngle?
  public init(image: VerIDCore.VerIDImage, requestedBearing: VerIDCore.Bearing, defaultFaceBounds: VerIDCore.FaceBounds)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public class Signposting {
  public init(category: Swift.String)
  public func createSignpost(name: Swift.StaticString) -> VerIDCore.Signpost
  public func logStart(signpost: VerIDCore.Signpost)
  public func logEnd(signpost: VerIDCore.Signpost)
  @objc deinit
}
public class Signpost {
  final public let name: Swift.StaticString
  final public let signpostId: Any?
  public var startTime: Swift.Double?
  public init(name: Swift.StaticString, signpostId: Any?)
  @objc deinit
}
public class FunctionCallReport : VerIDCore.Transaction {
  public enum Function : Swift.String, Swift.Codable {
    case detectFaces, compareFaces
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  final public let function: VerIDCore.FunctionCallReport.Function
  public init(function: VerIDCore.FunctionCallReport.Function, time: Foundation.Date = Date(), error: Swift.String? = nil)
  required public init(from decoder: Swift.Decoder) throws
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc(VerIDRecognitionFace) public class RecognitionFace : ObjectiveC.NSObject, VerIDCore.Recognizable, Swift.Codable {
  public enum Version : Swift.Int32 {
    case unencrypted, encrypted, v20Unencrypted, v20Encrypted
    public init?(rawValue: Swift.Int32)
    public typealias RawValue = Swift.Int32
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @objc public var recognitionData: Foundation.Data
  @objc public var version: Swift.Int32
  @objc public init(recognitionData: Foundation.Data)
  public init(recognitionData: Foundation.Data, version: VerIDCore.RecognitionFace.Version)
  @objc public init(recognitionData: Foundation.Data, faceTemplateVersion: VerIDCore.VerIDFaceTemplateVersion) throws
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc(VerIDFaceRecognitionFactory) public protocol FaceRecognitionFactory {
  @objc func createFaceRecognition() throws -> VerIDCore.FaceRecognition
}
public class Smoothing<T> {
  public var capacity: Swift.Int {
    get
    set
  }
  public var smoothedValue: T? {
    get
  }
  public init(bufferSize: Swift.Int)
  public func addSample(_ sample: T)
  public func removeFirstSample()
  public func reset()
  @objc deinit
}
@_inheritsConvenienceInitializers public class CGFloatSmoothing : VerIDCore.Smoothing<CoreGraphics.CGFloat> {
  override public init(bufferSize: Swift.Int)
  @objc deinit
}
@_inheritsConvenienceInitializers public class CGRectSmoothing : VerIDCore.Smoothing<CoreGraphics.CGRect> {
  override public init(bufferSize: Swift.Int)
  @objc deinit
}
@objc(VerIDFaceDetectionFactory) public protocol FaceDetectionFactory {
  @objc func createFaceDetection() throws -> VerIDCore.FaceDetection
}
@objc @_inheritsConvenienceInitializers public class SpoofingDetection : ObjectiveC.NSObject {
  public var faceAlignment: VerIDCore.FaceAlignmentDetection?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class FacePresenceDetection : ObjectiveC.NSObject {
  public enum Status : Swift.Int {
    case notFound, found, lost, turnedTooFar
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var sessionFaceTracking: VerIDCore.SessionFaceTracking?
  public var status: VerIDCore.FacePresenceDetection.Status
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class VerIDFactory : ObjectiveC.NSObject {
  @objc weak public var delegate: VerIDCore.VerIDFactoryDelegate?
  @objc public var faceDetectionFactory: VerIDCore.FaceDetectionFactory {
    @objc get
    @objc set
  }
  @objc public var faceRecognitionFactory: VerIDCore.FaceRecognitionFactory {
    @objc get
    @objc set
  }
  @objc public var userManagementFactory: VerIDCore.UserManagementFactory
  @objc public init(userManagementFactory: VerIDCore.UserManagementFactory)
  @objc override convenience dynamic public init()
  @objc public func createVerID()
  @objc public func createVerIDSync() throws -> VerIDCore.VerID
  public func createVerID(completion: ((Swift.Result<VerIDCore.VerID, Swift.Error>) -> Swift.Void)?)
  @objc deinit
}
@objc public protocol ImageProviderService {
  @objc func dequeueImage() throws -> VerIDCore.VerIDImage
}
@objc public protocol ImageProviderServiceFactory {
  @objc func makeImageProviderService() -> VerIDCore.ImageProviderService
}
@_hasMissingDesignatedInitializers public class FaceTemplateEncryption {
  public func encryptFaceTemplate(_ faceTemplate: VerIDCore.Recognizable) throws -> VerIDCore.Recognizable
  public func decryptFaceTemplate(_ faceTemplate: VerIDCore.Recognizable) throws -> VerIDCore.Recognizable
  @objc deinit
}
@objc public protocol VideoWriterService {
  @objc func writeSampleBuffer(_ sampleBuffer: CoreMedia.CMSampleBuffer, rotation: CoreGraphics.CGFloat)
  @objc func finish(completionBlock: @escaping (Foundation.URL?) -> Swift.Void)
}
@objc public protocol VideoWriterServiceFactory {
  @objc func makeVideoWriterService(url: Foundation.URL) throws -> VerIDCore.VideoWriterService
}
@_inheritsConvenienceInitializers @objc public class VerIDVideoWriterServiceFactory : ObjectiveC.NSObject, VerIDCore.VideoWriterServiceFactory {
  final public let videoScale: Swift.Float
  public init(videoScale: Swift.Float)
  @objc convenience override dynamic public init()
  @objc public func makeVideoWriterService(url: Foundation.URL) throws -> VerIDCore.VideoWriterService
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class VerIDVideoWriterService : ObjectiveC.NSObject, VerIDCore.VideoWriterService {
  @objc public func writeSampleBuffer(_ sampleBuffer: CoreMedia.CMSampleBuffer, rotation: CoreGraphics.CGFloat)
  @objc public func finish(completionBlock: @escaping (Foundation.URL?) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(VerIDSessionResult) public class VerIDSessionResult : ObjectiveC.NSObject, Swift.Codable {
  public var startTime: Foundation.Date {
    get
  }
  public var sessionDiagnostics: VerIDCore.SessionDiagnostics? {
    get
  }
  public var duration: Foundation.TimeInterval? {
    get
  }
  @objc public var error: Swift.Error?
  @available(*, unavailable, renamed: "faceCaptures")
  @objc public var attachments: [VerIDCore.FaceCapture] {
    @objc get
  }
  @objc public var faceCaptures: [VerIDCore.FaceCapture]
  @objc public var videoURL: Foundation.URL?
  @objc public init(error: Swift.Error)
  @available(*, unavailable, renamed: "init(faceCaptures:)")
  @objc public init(attachments: [VerIDCore.FaceCapture])
  @objc public init(faceCaptures: [VerIDCore.FaceCapture])
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  @objc public var faces: [VerIDCore.RecognizableFace] {
    @objc get
  }
  @available(*, unavailable, renamed: "faces")
  @objc public var facesSuitableForRecognition: [VerIDCore.RecognizableFace] {
    @objc get
  }
  @available(*, unavailable)
  @objc public var imageURLs: [Foundation.URL] {
    @objc get
  }
  public var detectedBearings: Swift.Set<VerIDCore.Bearing> {
    get
  }
  @objc public func faces(withBearing bearing: VerIDCore.Bearing) -> [VerIDCore.RecognizableFace]
  @available(*, unavailable, renamed: "faces(withBearing:)")
  @objc public func facesSuitableForRecognition(withBearing bearing: VerIDCore.Bearing) -> [VerIDCore.RecognizableFace]
  @available(*, unavailable)
  @objc public func imageURLs(withBearing bearing: VerIDCore.Bearing) -> [Foundation.URL]
  @objc deinit
}
@available(*, deprecated, renamed: "VerIDSessionResult")
public typealias SessionResult = VerIDCore.VerIDSessionResult
@propertyWrapper public struct Atomic<T> {
  public var wrappedValue: T {
    get
    set
  }
  public init(wrappedValue: T)
}
@objc public protocol VerIDFactoryDelegate {
  @objc optional func veridFactory(_ factory: VerIDCore.VerIDFactory, didCreateVerID verID: VerIDCore.VerID)
  @objc func veridFactory(_ factory: VerIDCore.VerIDFactory, didFailWithError error: Swift.Error)
}
@_hasMissingDesignatedInitializers @objc public class VerID : ObjectiveC.NSObject {
  @objc final public let faceDetection: VerIDCore.FaceDetection
  @objc final public let faceRecognition: VerIDCore.FaceRecognition
  @objc final public let userManagement: VerIDCore.UserManagement
  @objc deinit
}
public enum FacePresenceError : Foundation.CustomNSError {
  case faceLost(requestedBearing: VerIDCore.Bearing), faceMovedTooFar(requestedBearing: VerIDCore.Bearing), faceNotFound(requestedBearing: VerIDCore.Bearing)
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
@available(*, unavailable, message: "Removed in 2.0.0")
@objc public protocol ImageWriterService {
  @objc func writeImage(_ image: VerIDCore.VerIDImage, completion: ((Swift.Error?) -> Swift.Void)?) -> Foundation.URL?
}
@available(*, unavailable, message: "Removed in 2.0.0")
@objc public protocol ImageWriterServiceFactory {
  @objc func makeImageWriterService() throws -> VerIDCore.ImageWriterService
}
@available(*, unavailable, message: "Removed in 2.0.0")
public enum VerIDImageWriterServiceError : Swift.Error {
  case fileExistsAtDirectory(Swift.String), imageEncodingError
}
@_hasMissingDesignatedInitializers @available(*, unavailable, message: "Removed in 2.0.0")
@objc public class VerIDImageWriterService : ObjectiveC.NSObject, VerIDCore.ImageWriterService {
  @objc public func writeImage(_ image: VerIDCore.VerIDImage, completion: ((Swift.Error?) -> Swift.Void)?) -> Foundation.URL?
  @objc deinit
}
@_inheritsConvenienceInitializers @available(*, unavailable, message: "Removed in 2.0.0")
@objc public class VerIDImageWriterServiceFactory : ObjectiveC.NSObject, VerIDCore.ImageWriterServiceFactory {
  @objc final public let imageProcessorFactory: VerIDCore.ImageProcessorServiceFactory
  @objc override dynamic public init()
  @objc public init(imageProcessorFactory: VerIDCore.ImageProcessorServiceFactory)
  @objc public func makeImageWriterService() throws -> VerIDCore.ImageWriterService
  @objc deinit
}
@objc open class AngleBearingEvaluation : ObjectiveC.NSObject {
  final public let sessionSettings: VerIDCore.VerIDSessionSettings
  public var pitchThresholdTolerance: CoreGraphics.CGFloat
  public var yawThresholdTolerance: CoreGraphics.CGFloat
  public init(sessionSettings: VerIDCore.VerIDSessionSettings, pitchThresholdTolerance: CoreGraphics.CGFloat, yawThresholdTolerance: CoreGraphics.CGFloat)
  public func angle(forBearing bearing: VerIDCore.Bearing) -> VerIDCore.EulerAngle
  @objc open func angle(_ angle: VerIDCore.EulerAngle, matchesBearing bearing: VerIDCore.Bearing) -> Swift.Bool
  @objc open func offsetFromAngle(_ from: VerIDCore.EulerAngle, toBearing bearing: VerIDCore.Bearing) -> VerIDCore.EulerAngle
  open func angle(_ angle: VerIDCore.EulerAngle, isBetweenBearing fromBearing: VerIDCore.Bearing, and toBearing: VerIDCore.Bearing) -> Swift.Bool
  @objc deinit
}
@objc public enum Axis : Swift.Int {
  case pitch, yaw
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class VerIDFaceDetectionRecognitionFactory : ObjectiveC.NSObject, VerIDCore.FaceDetectionFactory, VerIDCore.FaceRecognitionFactory {
  final public let apiSecret: Swift.String?
  final public let settings: VerIDCore.DetRecLibSettings
  @objc public var faceDetectionImageProcessors: [VerIDCore.ImageProcessorService]
  @objc public var faceRecognitionImageProcessors: [VerIDCore.ImageProcessorService]
  @objc public var defaultFaceTemplateVersion: VerIDCore.VerIDFaceTemplateVersion
  @objc public var additionalFaceClassifiers: [VerIDCore.Classifier]
  @objc public init(apiSecret: Swift.String?, settings: VerIDCore.DetRecLibSettings? = nil)
  @objc override convenience dynamic public init()
  @objc public func createFaceDetection() throws -> VerIDCore.FaceDetection
  @objc public func createFaceRecognition() throws -> VerIDCore.FaceRecognition
  @objc deinit
}
@objc public enum VerIDFaceDetectionRecognitionFactoryError : Swift.Int, Swift.Error {
  case invalidModelsURL
  case failedToInitializeResourceLoader
  case failedToInitializeFaceDetectionRecognition
  case missingImageProcessors
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class VerIDImage : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let sampleBuffer: CoreMedia.CMSampleBuffer?
  @objc final public let cgImage: CoreGraphics.CGImage?
  @objc final public let orientation: ImageIO.CGImagePropertyOrientation
  @objc public var faceDetectionImage: VerIDCore.FaceDetectionImage? {
    get
  }
  @objc public var imageProcessorName: Swift.String? {
    get
  }
  public var grayscalePixels: [Swift.UInt8]?
  public var argbPixels: [Swift.UInt8]?
  public var rgbPixels: [Swift.UInt8]?
  public var size: CoreGraphics.CGSize?
  public var isMirrored: Swift.Bool
  @objc public var grayscaleImageProcessorName: Swift.String?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc public init(sampleBuffer: CoreMedia.CMSampleBuffer, orientation: ImageIO.CGImagePropertyOrientation)
  @objc public init(cgImage: CoreGraphics.CGImage, orientation: ImageIO.CGImagePropertyOrientation)
  @objc convenience public init?(url: Foundation.URL)
  public init(grayscalePixels: [Swift.UInt8], size: CoreGraphics.CGSize)
  @objc public init?(uiImage: UIKit.UIImage)
  @objc deinit
}
@objc public enum VerIDError : Swift.Int, Foundation.LocalizedError {
  case invalidAPISecret, invalidAPIKey, sdkAuthorizationTimeout, sdkAuthorizationRequestError, sdkAuthorizationResponseParseError, sdkAuthenticationRequestEncodingError, sdkAuthenticationRequestError, sdkAuthenticationResponseParseError, sdkAuthenticationTimeout
  case sessionTimeout
  case invalidAuthUrl
  case undefinedImageSize
  case imageCreationFailure
  case unexpectedFaceDetectionResultStatus
  case faceMissing
  case unsupportedFaceTemplateVersion
  case userMissingRequiredFaceTemplates
  case faceTemplateVersionMismatch
  case refusingToRunOnMainThread
  public var errorDescription: Swift.String? {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum HttpStatusError : Foundation.LocalizedError {
  case unexpectedHttpStatus(status: Swift.Int)
  public var errorDescription: Swift.String? {
    get
  }
}
public enum FaceDetectionError : Swift.Error {
  case faceNotFound, internalError
  public static func == (a: VerIDCore.FaceDetectionError, b: VerIDCore.FaceDetectionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum FaceRecognitionError : Swift.Int, Swift.Error {
  case templateExtractionFailed
  case multipleSubjectFaceVersions
  case multipleChallengeFaceVersions
  case unsupportedFaceTemplateVersion
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ImageProcessingError : Swift.Int, Swift.Error {
  case grayscaleConversionError, imageProcessorTaskError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum InvalidParameterError : Foundation.LocalizedError {
  case arrayEmptyError(name: Swift.String)
  case invalidArrayLengthError(name: Swift.String, length: Swift.Int, requiredLength: Swift.Int)
}
@objc public enum DatabaseError : Swift.Int, Swift.Error {
  case failedToOpenDatabase, failedToPrepareStatement, failedToBindText
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SessionSharingError : Swift.Int, Foundation.LocalizedError {
  case invalidDirectory
  public var errorDescription: Swift.String? {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class SessionFaceTracking {
  public var requestedBearing: VerIDCore.Bearing
  public var image: VerIDCore.VerIDImage?
  public var defaultFaceBounds: VerIDCore.FaceBounds?
  public var face: VerIDCore.Face?
  final public let angleBearingEvaluation: VerIDCore.AngleBearingEvaluation
  @objc deinit
}
@objc(VerIDFaceRecognition) public protocol FaceRecognition {
  @objc var authenticationScoreThreshold: Foundation.NSNumber { get set }
  @objc var maxAuthenticationScore: Foundation.NSNumber { get }
  @objc func compareSubjectFaces(_ subjectFaces: [VerIDCore.Recognizable], toFaces faces: [VerIDCore.Recognizable]) throws -> Foundation.NSNumber
  @objc func createRecognizableFacesFromFaces(_ faces: [VerIDCore.Face], inImage image: VerIDCore.VerIDImage) throws -> [VerIDCore.Recognizable]
}
public enum FaceAuthenticationError : Foundation.CustomNSError {
  case authenticationScoreTooLow(score: Swift.Float, threshold: Swift.Float, maxScore: Swift.Float)
  case userNotRegistered(userId: Swift.String)
  case userMissingRequiredFaceTemplates(userId: Swift.String, faceTemplateVersion: VerIDCore.VerIDFaceTemplateVersion)
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
open class SessionFunctions {
  final public let verID: VerIDCore.VerID
  final public let sessionSettings: VerIDCore.VerIDSessionSettings
  public init(verID: VerIDCore.VerID, sessionSettings: VerIDCore.VerIDSessionSettings)
  open var sessionFaceTrackingAccumulator: (inout VerIDCore.SessionFaceTracking, (image: VerIDCore.VerIDImage, defaultFaceBounds: VerIDCore.FaceBounds)) throws -> Swift.Void {
    get
  }
  open var facePresenceDetectionAccumulator: (inout VerIDCore.FacePresenceDetection, VerIDCore.SessionFaceTracking) throws -> Swift.Void {
    get
  }
  open var faceAlignmentDetectionAccumulator: (inout VerIDCore.FaceAlignmentDetection, VerIDCore.FacePresenceDetection) throws -> Swift.Void {
    get
  }
  open var spoofingDetectionAccumulator: (inout VerIDCore.SpoofingDetection, VerIDCore.FaceAlignmentDetection) throws -> Swift.Void {
    get
  }
  open var faceDetectionResultCreator: (VerIDCore.SpoofingDetection) throws -> VerIDCore.FaceDetectionResult {
    get
  }
  open var faceCaptureCreator: (VerIDCore.FaceDetectionResult) throws -> VerIDCore.FaceCapture {
    get
  }
  open var faceCaptureAccumulator: (inout VerIDCore.VerIDSessionResult, VerIDCore.FaceCapture) throws -> Swift.Void {
    get
  }
  open var sessionResultProcessor: (VerIDCore.VerIDSessionResult) throws -> VerIDCore.VerIDSessionResult {
    get
  }
  @objc deinit
}
public enum VerIDSessionError : Foundation.CustomNSError {
  case timeout, livenessFailure, faceDetectionEvaluationError, other(cause: Swift.Error), cameraAccessDenied, faceIsCovered, imageObservableUnavailable
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
extension VerIDCore.Recognizable {
  public var faceTemplateVersion: VerIDCore.VerIDFaceTemplateVersion {
    get
  }
}
@_inheritsConvenienceInitializers @objc(VerIDEulerAngle) public class EulerAngle : ObjectiveC.NSObject, Swift.Codable {
  @objc public var yaw: CoreGraphics.CGFloat
  @objc public var pitch: CoreGraphics.CGFloat
  @objc public var roll: CoreGraphics.CGFloat
  @objc override dynamic public init()
  public init(yaw: CoreGraphics.CGFloat, pitch: CoreGraphics.CGFloat, roll: CoreGraphics.CGFloat)
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(VerIDFaceDetection) public protocol FaceDetection {
  @objc func startFaceTracking() -> VerIDCore.FaceTracking
  @objc func detectFacesInImage(_ image: VerIDCore.VerIDImage, limit: Swift.Int32, options: Swift.UInt) throws -> [VerIDCore.Face]
}
public struct CircularBuffer<T> : Swift.Sequence, Swift.IteratorProtocol {
  public mutating func next() -> T?
  public typealias Element = T
  @VerIDCore.Atomic public var capacity: Swift.Int {
    get
    set
    _modify
  }
  public init(capacity: Swift.Int)
  public mutating func enqueue(_ element: T)
  @discardableResult
  public mutating func dequeue() -> T?
  public subscript(index: Swift.Int) -> T? {
    get
  }
  public var first: T? {
    get
  }
  public var last: T? {
    get
  }
  public var count: Swift.Int {
    get
  }
  public mutating func clear()
  public var isFull: Swift.Bool {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public typealias Iterator = VerIDCore.CircularBuffer<T>
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 10.0, *)
public class VerIDUserManagement : ObjectiveC.NSObject, VerIDCore.UserManagement2 {
  final public let faceTemplateEncryption: VerIDCore.FaceTemplateEncryption
  final public let isEncryptionDisabled: Swift.Bool
  final public let isAutomaticFaceTemplateMigrationEnabled: Swift.Bool
  @objc public func assignFaces(_ faces: [VerIDCore.Recognizable], toUser userId: Swift.String, completion: VerIDCore.VerIDUserManagement.ErrorCallback? = nil)
  @objc public func addUsersWithFaces(_ userFaces: [Swift.String : [VerIDCore.Recognizable]], completion: VerIDCore.VerIDUserManagement.ErrorCallback?)
  @objc public func deleteFaces(_ faces: [VerIDCore.Recognizable], completion: ((Swift.Error?) -> Swift.Void)? = nil)
  @objc public func users() throws -> [Swift.String]
  @objc public func facesOfUser(_ userId: Swift.String) throws -> [VerIDCore.Recognizable]
  @objc public func faces() throws -> [VerIDCore.Recognizable]
  @objc public func deleteUsers(_ userIds: [Swift.String], completion: ((Swift.Error?) -> Swift.Void)? = nil)
  @objc public func userInFace(_ face: VerIDCore.Recognizable) throws -> Swift.String
  @objc public func users(faceTemplateVersion: VerIDCore.VerIDFaceTemplateVersion) throws -> [Swift.String]
  @objc public func faces(faceTemplateVersion: VerIDCore.VerIDFaceTemplateVersion) throws -> [VerIDCore.Recognizable]
  @objc public func facesOfUser(_ userId: Swift.String, faceTemplateVersion: VerIDCore.VerIDFaceTemplateVersion) throws -> [VerIDCore.Recognizable]
  @objc public func countFacesWithVersion(_ version: VerIDCore.VerIDFaceTemplateVersion) throws -> Foundation.NSNumber
  @objc deinit
}
@available(iOS 10.3, *)
public class Report : Swift.Codable {
  final public let appId: Swift.String
  final public let certSerial: Swift.UInt64?
  final public let instanceId: Swift.String
  final public let deviceOs: Swift.String
  final public let osVersion: Swift.String
  public var sessions: [VerIDCore.SessionReport]
  public var functionCalls: [VerIDCore.FunctionCallReport]
  final public let veridVersion: Swift.String?
  public init(identity: VerIDSDKIdentity.VerIDIdentity)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public var isEmpty: Swift.Bool {
    get
  }
  @objc deinit
}
public enum AntiSpoofingError : Foundation.CustomNSError {
  case movedOpposite(requestedBearing: VerIDCore.Bearing), movedTooFast(requestedBearing: VerIDCore.Bearing)
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
@objc(VerIDLivenessDetection) public enum LivenessDetection : Swift.Int, Swift.Codable {
  case none
  case regular
  case strict
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol ImageProcessorService {
  @objc func prepareImageForFaceDetection(_ image: VerIDCore.VerIDImage, recalculate: Swift.Bool) throws
  @objc func cgImageFromVerIDImage(_ image: VerIDCore.VerIDImage) throws -> CoreGraphics.CGImage
  @objc var name: Swift.String? { get }
}
@objc public protocol ImageProcessorServiceFactory {
  @objc func makeImageProcessorService() throws -> VerIDCore.ImageProcessorService
}
@objc public class VerIDImageProcessorServiceFactory : ObjectiveC.NSObject, VerIDCore.ImageProcessorServiceFactory {
  @objc public init(adjustmentProvider: VerIDCore.ImageAdjustmentProvider)
  @objc public func makeImageProcessorService() throws -> VerIDCore.ImageProcessorService
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class ImageAdjustmentProvider : ObjectiveC.NSObject {
  @objc open var name: Swift.String {
    @objc get
  }
  @objc open func adjustImageBuffer(_ buffer: [Swift.UInt8], size: CoreGraphics.CGSize) throws -> [Swift.UInt8]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class ImageAdjustmentHistogramSpec : VerIDCore.ImageAdjustmentProvider {
  @objc override open var name: Swift.String {
    @objc get
  }
  @objc override open func adjustImageBuffer(_ buffer: [Swift.UInt8], size: CoreGraphics.CGSize) throws -> [Swift.UInt8]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ImageAdjustmentBrighten : VerIDCore.ImageAdjustmentHistogramSpec {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ImageAdjustmentEqualize : VerIDCore.ImageAdjustmentProvider {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override public func adjustImageBuffer(_ buffer: [Swift.UInt8], size: CoreGraphics.CGSize) throws -> [Swift.UInt8]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class PassThroughImageProcessorService : VerIDCore.VerIDImageProcessorService {
  @objc override public func prepareImageForFaceDetection(_ image: VerIDCore.VerIDImage, recalculate: Swift.Bool) throws
  @objc override public var name: Swift.String? {
    @objc get
  }
  @objc override public init(imageAdjustmentProvider: VerIDCore.ImageAdjustmentProvider)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class VerIDImageProcessorService : ObjectiveC.NSObject, VerIDCore.ImageProcessorService {
  @objc final public let imageAdjustmentProvider: VerIDCore.ImageAdjustmentProvider
  @objc public var name: Swift.String? {
    @objc get
  }
  @objc convenience override dynamic public init()
  @objc public init(imageAdjustmentProvider: VerIDCore.ImageAdjustmentProvider)
  @objc public func prepareImageForFaceDetection(_ image: VerIDCore.VerIDImage, recalculate: Swift.Bool) throws
  @objc public func cgImageFromVerIDImage(_ image: VerIDCore.VerIDImage) throws -> CoreGraphics.CGImage
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VerIDUserManagementiOS9 : ObjectiveC.NSObject, VerIDCore.UserManagement {
  @objc public func assignFaces(_ faces: [VerIDCore.Recognizable], toUser userId: Swift.String, completion: VerIDCore.VerIDUserManagementiOS9.ErrorCallback? = nil)
  @objc public func deleteFaces(_ faces: [VerIDCore.Recognizable], completion: ((Swift.Error?) -> Swift.Void)? = nil)
  @objc public func users() throws -> [Swift.String]
  @objc public func facesOfUser(_ userId: Swift.String) throws -> [VerIDCore.Recognizable]
  @objc public func faces() throws -> [VerIDCore.Recognizable]
  @objc public func deleteUsers(_ userIds: [Swift.String], completion: ((Swift.Error?) -> Swift.Void)? = nil)
  @objc public func userInFace(_ face: VerIDCore.Recognizable) throws -> Swift.String
  @objc deinit
}
@objc public class FaceBounds : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(viewSize: CoreGraphics.CGSize, faceExtents: VerIDCore.FaceExtents)
  @objc public func translatedToImageSize(_ imageSize: CoreGraphics.CGSize) -> CoreGraphics.CGRect
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers public class AngleSmoothing : VerIDCore.Smoothing<VerIDCore.EulerAngle> {
  override public init(bufferSize: Swift.Int)
  override public func addSample(_ sample: VerIDCore.EulerAngle)
  override public func reset()
  @objc deinit
}
@objc(VerIDFaceExtents) public class FaceExtents : ObjectiveC.NSObject, Swift.Comparable {
  @objc final public let proportionOfViewWidth: CoreGraphics.CGFloat
  @objc final public let proportionOfViewHeight: CoreGraphics.CGFloat
  @objc public init(proportionOfViewWidth: CoreGraphics.CGFloat, proportionOfViewHeight: CoreGraphics.CGFloat)
  @objc public static let defaultExtents: VerIDCore.FaceExtents
  public static func < (lhs: VerIDCore.FaceExtents, rhs: VerIDCore.FaceExtents) -> Swift.Bool
  @objc deinit
}
public typealias Face = VerIDCore.VerIDFace
@_inheritsConvenienceInitializers @objc public class VerIDFace : ObjectiveC.NSObject, Swift.Codable {
  @objc public var bounds: CoreGraphics.CGRect
  @objc public var angle: VerIDCore.EulerAngle
  @objc public var quality: CoreGraphics.CGFloat
  @objc public var leftEye: CoreGraphics.CGPoint
  @objc public var rightEye: CoreGraphics.CGPoint
  @objc public var data: Foundation.Data
  @objc public var landmarks: [CoreGraphics.CGPoint]
  @objc public var attributes: [Swift.String : Any]
  @objc override dynamic public init()
  public func flipped(imageSize: CoreGraphics.CGSize) -> VerIDCore.Face
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc(VerIDUserIdentification) public class UserIdentification : ObjectiveC.NSObject {
  @objc final public let verid: VerIDCore.VerID
  @objc public init(verid: VerIDCore.VerID)
  @objc public func identifyUsersInFace(_ face: VerIDCore.Recognizable) throws -> [Swift.String : Swift.Float]
  public func identifyUsersInFace(_ face: VerIDCore.Recognizable, progress: Foundation.Progress? = nil, completion: @escaping (Swift.Result<[Swift.String : Swift.Float], Swift.Error>) -> Swift.Void)
  @objc public func findFacesSimilarTo(_ face: VerIDCore.Recognizable, in faces: [VerIDCore.Recognizable], threshold: Foundation.NSNumber? = nil) throws -> [VerIDCore.FaceWithScore]
  public func findFacesSimilarTo(_ face: VerIDCore.Recognizable, in faces: [VerIDCore.Recognizable], threshold: Swift.Float? = nil, progress: Foundation.Progress? = nil, completion: @escaping (Swift.Result<[VerIDCore.FaceWithScore], Swift.Error>) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class FaceWithScore : ObjectiveC.NSObject, Swift.Comparable {
  public static func < (lhs: VerIDCore.FaceWithScore, rhs: VerIDCore.FaceWithScore) -> Swift.Bool
  @objc final public let face: VerIDCore.Recognizable
  @objc final public let score: Swift.Float
  @objc deinit
}
@objc public class SessionResultPackage : ObjectiveC.NSObject {
  final public let verID: VerIDCore.VerID
  final public let settings: VerIDCore.VerIDSessionSettings
  final public let result: VerIDCore.VerIDSessionResult
  @objc public init(verID: VerIDCore.VerID, settings: VerIDCore.VerIDSessionSettings, result: VerIDCore.VerIDSessionResult)
  public var environmentSettings: VerIDCore.EnvironmentSettings {
    get
    set
  }
  @objc public func createArchive() throws -> Foundation.URL
  @objc public func createItemActivityProvider(archiveURL: Foundation.URL) -> VerIDCore.SessionItemActivityProvider
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class SessionItemActivityProvider : UIKit.UIActivityItemProvider {
  @objc override dynamic public var item: Any {
    @objc get
  }
  @objc override dynamic public func activityViewController(_ activityViewController: UIKit.UIActivityViewController, dataTypeIdentifierForActivityType activityType: UIKit.UIActivity.ActivityType?) -> Swift.String
  @objc override dynamic public func activityViewController(_ activityViewController: UIKit.UIActivityViewController, subjectForActivityType activityType: UIKit.UIActivity.ActivityType?) -> Swift.String
  @objc override dynamic public func activityViewController(_ activityViewController: UIKit.UIActivityViewController, thumbnailImageForActivityType activityType: UIKit.UIActivity.ActivityType?, suggestedSize size: CoreGraphics.CGSize) -> UIKit.UIImage?
  @objc deinit
}
public struct EnvironmentSettings : Swift.Encodable {
  public let confidenceThreshold: Swift.Float?
  public let faceTemplateExtractionThreshold: Swift.Float?
  public let authenticationThreshold: Swift.Float?
  public let deviceModel: Swift.String
  public let os: Swift.String
  public let applicationId: Swift.String
  public let applicationVersion: Swift.String
  public let veridVersion: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @objc public class VerIDFaceDetection : ObjectiveC.NSObject, VerIDCore.FaceDetection {
  @objc public var faceExtractQualityThreshold: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var landmarkTrackingQualityThreshold: Swift.Float {
    @objc get
    @objc set
  }
  @objc final public let detRecLib: VerIDCore.DetRecLib
  @objc public var imageProcessors: [VerIDCore.ImageProcessorService]
  @objc public func detectFacesInImage(_ image: VerIDCore.VerIDImage, limit: Swift.Int32, options: Swift.UInt) throws -> [VerIDCore.Face]
  @objc public func startFaceTracking() -> VerIDCore.FaceTracking
  @objc public func extractAttributeFromFace(_ face: VerIDCore.Face, image: VerIDCore.VerIDImage, using classifier: Swift.String) throws -> Foundation.NSNumber
  @objc public var faceAttributeClassifiers: [Swift.String] {
    @objc get
    @objc set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class VerIDFaceTracking : ObjectiveC.NSObject, VerIDCore.FaceTracking {
  @objc public func trackFaceInImage(_ image: VerIDCore.VerIDImage) throws -> VerIDCore.Face
  @objc deinit
}
public class SessionReport : VerIDCore.Transaction {
  public enum SessionPurpose : Swift.String, Swift.Codable {
    case livenessDetection, registration, authentication
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct SessionSettings : Swift.Codable {
    public let numberOfResultsToCollect: Swift.Int
    public let expiryTime: Foundation.TimeInterval
    public let useFrontCamera: Swift.Bool
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public init(purpose: VerIDCore.SessionReport.SessionPurpose, duration: Foundation.TimeInterval, settings: VerIDCore.SessionReport.SessionSettings, time: Foundation.Date, error: Swift.String? = nil)
  public init(sessionSettings: VerIDCore.VerIDSessionSettings, result: VerIDCore.VerIDSessionResult, duration: Foundation.TimeInterval, time: Foundation.Date)
  required public init(from decoder: Swift.Decoder) throws
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@available(*, unavailable, renamed: "FaceCapture")
public typealias DetectedFace = VerIDCore.FaceCapture
@available(*, unavailable, renamed: "VerIDFaceCapture")
public typealias VerIDDetectedFace = VerIDCore.FaceCapture
@objc(VerIDFaceCapture) public class FaceCapture : ObjectiveC.NSObject, Swift.Codable {
  @objc public var face: VerIDCore.RecognizableFace
  @objc public var bearing: VerIDCore.Bearing
  @available(*, unavailable, message: "Use `image` property instead")
  @objc public var imageURL: Foundation.URL?
  @objc public var image: UIKit.UIImage
  @objc public var faceImage: UIKit.UIImage {
    @objc get
    @objc set
  }
  public var diagnosticInfo: VerIDCore.FaceCapture.DiagnosticInfo {
    get
  }
  @available(*, unavailable, renamed: "init(face:bearing:image:)")
  @objc public init(face: VerIDCore.RecognizableFace, bearing: VerIDCore.Bearing, imageURL: Foundation.URL? = nil)
  @objc public init(face: VerIDCore.RecognizableFace, bearing: VerIDCore.Bearing, image: UIKit.UIImage)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension VerIDCore.FaceCapture {
  public struct DiagnosticInfo : Swift.Codable {
    public var maskScore: Swift.Float? {
      get
    }
    public var brightness: Swift.Double? {
      get
    }
    public var contrast: Swift.Double? {
      get
    }
    public var sharpness: Swift.Double? {
      get
    }
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
}
@objc(VerIDBearing) public enum Bearing : Swift.Int, Swift.Codable, Swift.CaseIterable, Swift.Equatable {
  case straight
  case up
  case rightUp
  case right
  case rightDown
  case down
  case leftDown
  case left
  case leftUp
  public var stringValue: Swift.String {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [VerIDCore.Bearing]
  public typealias RawValue = Swift.Int
  public static var allCases: [VerIDCore.Bearing] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension VerIDCore.VerIDFactory {
  @available(iOS 10.3, *)
  @objc convenience dynamic public init(veridPassword: Swift.String)
  @available(iOS 10.3, *)
  @objc convenience dynamic public init(identity: VerIDSDKIdentity.VerIDIdentity)
}
extension VerIDCore.ImageUtilError : Swift.Equatable {}
extension VerIDCore.ImageUtilError : Swift.Hashable {}
extension VerIDCore.FaceAlignmentDetection.Status : Swift.Equatable {}
extension VerIDCore.FaceAlignmentDetection.Status : Swift.Hashable {}
extension VerIDCore.FaceAlignmentDetection.Status : Swift.RawRepresentable {}
extension VerIDCore.FaceDetectionStatus : Swift.Equatable {}
extension VerIDCore.FaceDetectionStatus : Swift.Hashable {}
extension VerIDCore.FaceDetectionStatus : Swift.RawRepresentable {}
extension VerIDCore.FunctionCallReport.Function : Swift.Equatable {}
extension VerIDCore.FunctionCallReport.Function : Swift.Hashable {}
extension VerIDCore.FunctionCallReport.Function : Swift.RawRepresentable {}
extension VerIDCore.RecognitionFace.Version : Swift.Equatable {}
extension VerIDCore.RecognitionFace.Version : Swift.Hashable {}
extension VerIDCore.RecognitionFace.Version : Swift.RawRepresentable {}
extension VerIDCore.FacePresenceDetection.Status : Swift.Equatable {}
extension VerIDCore.FacePresenceDetection.Status : Swift.Hashable {}
extension VerIDCore.FacePresenceDetection.Status : Swift.RawRepresentable {}
extension VerIDCore.Axis : Swift.Equatable {}
extension VerIDCore.Axis : Swift.Hashable {}
extension VerIDCore.Axis : Swift.RawRepresentable {}
extension VerIDCore.VerIDFaceDetectionRecognitionFactoryError : Swift.Equatable {}
extension VerIDCore.VerIDFaceDetectionRecognitionFactoryError : Swift.Hashable {}
extension VerIDCore.VerIDFaceDetectionRecognitionFactoryError : Swift.RawRepresentable {}
extension VerIDCore.VerIDError : Swift.Equatable {}
extension VerIDCore.VerIDError : Swift.Hashable {}
extension VerIDCore.VerIDError : Swift.RawRepresentable {}
extension VerIDCore.FaceDetectionError : Swift.Equatable {}
extension VerIDCore.FaceDetectionError : Swift.Hashable {}
extension VerIDCore.FaceRecognitionError : Swift.Equatable {}
extension VerIDCore.FaceRecognitionError : Swift.Hashable {}
extension VerIDCore.FaceRecognitionError : Swift.RawRepresentable {}
extension VerIDCore.ImageProcessingError : Swift.Equatable {}
extension VerIDCore.ImageProcessingError : Swift.Hashable {}
extension VerIDCore.ImageProcessingError : Swift.RawRepresentable {}
extension VerIDCore.DatabaseError : Swift.Equatable {}
extension VerIDCore.DatabaseError : Swift.Hashable {}
extension VerIDCore.DatabaseError : Swift.RawRepresentable {}
extension VerIDCore.SessionSharingError : Swift.Equatable {}
extension VerIDCore.SessionSharingError : Swift.Hashable {}
extension VerIDCore.SessionSharingError : Swift.RawRepresentable {}
extension VerIDCore.LivenessDetection : Swift.Equatable {}
extension VerIDCore.LivenessDetection : Swift.Hashable {}
extension VerIDCore.LivenessDetection : Swift.RawRepresentable {}
extension VerIDCore.SessionReport.SessionPurpose : Swift.Equatable {}
extension VerIDCore.SessionReport.SessionPurpose : Swift.Hashable {}
extension VerIDCore.SessionReport.SessionPurpose : Swift.RawRepresentable {}
extension VerIDCore.Bearing : Swift.Hashable {}
extension VerIDCore.Bearing : Swift.RawRepresentable {}
